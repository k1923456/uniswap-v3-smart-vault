{
  "address": "0x8792037Da56006476a6BF035f607E7dA254ccD7A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_diamondCutFacet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapAddressHolder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "positionManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "PositionManagerCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "actions",
      "outputs": [
        {
          "internalType": "address",
          "name": "facetAddress",
          "type": "address"
        },
        {
          "internalType": "enum IDiamondCut.FacetCutAction",
          "name": "action",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "diamondCutFacet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cursor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "howMany",
          "type": "uint256"
        }
      ],
      "name": "getPositionManagers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "managers",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "newCursor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPositionManagersLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "positionManagers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapAddressHolder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut",
          "name": "facetAction",
          "type": "tuple"
        }
      ],
      "name": "updateActionData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "positionManager",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "actionsToUpdate",
          "type": "tuple[]"
        }
      ],
      "name": "updateDiamond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userToPositionManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd9509ea8301c5abd76df00fd5fedf6d6628d9054fd6c2e7331e9a56e90b203b3",
  "receipt": {
    "to": null,
    "from": "0x565d490806A6D8eF532f4d29eC00EF6aAC71A17A",
    "contractAddress": "0x8792037Da56006476a6BF035f607E7dA254ccD7A",
    "transactionIndex": 11,
    "gasUsed": "5251023",
    "logsBloom": "0x
    "blockHash": "0x9e57909cad70419e3af4225508602445c247462e54dd5af8ccbb5b59fdfba0dd",
    "transactionHash": "0xd9509ea8301c5abd76df00fd5fedf6d6628d9054fd6c2e7331e9a56e90b203b3",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 39534364,
        "transactionHash": "0xd9509ea8301c5abd76df00fd5fedf6d6628d9054fd6c2e7331e9a56e90b203b3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000565d490806a6d8ef532f4d29ec00ef6aac71a17a",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001c5b2e8ed3474100000000000000000000000000000000000000000000000006d4e96461f9f8000000000000000000000000000000000000000000000033f162450465c4cd31fb00000000000000000000000000000000000000000000000006b88e35d326b0bf0000000000000000000000000000000000000000000033f162615f9453a0793c",
        "logIndex": 62,
        "blockHash": "0x9e57909cad70419e3af4225508602445c247462e54dd5af8ccbb5b59fdfba0dd"
      }
    ],
    "blockNumber": 39534364,
    "cumulativeGasUsed": "7808205",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2833242BAC2E2a196d240ADe39ff6D2b912D9edb",
    "0xBb198761B16567Dd94055B0e4C9FB86d5FfAF64B",
    "0x99c4bEa3DbC7C2670B0D781946071cAC215aC86D"
  ],
  "numDeployments": 2,
  "solcInputHash": "d6decf1baad82ada54f9f25242ad304c",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_diamondCutFacet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapAddressHolder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"positionManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PositionManagerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"actions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamondCutFacet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"howMany\",\"type\":\"uint256\"}],\"name\":\"getPositionManagers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"managers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"newCursor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPositionManagersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positionManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapAddressHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut\",\"name\":\"facetAction\",\"type\":\"tuple\"}],\"name\":\"updateActionData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"positionManager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"actionsToUpdate\",\"type\":\"tuple[]\"}],\"name\":\"updateDiamond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToPositionManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"PositionManagerCreated(address,address)\":{\"params\":{\"positionManager\":\"address of PositionManager\",\"user\":\"address of user\"}}},\"kind\":\"dev\",\"methods\":{\"create()\":{\"returns\":{\"_0\":\"address return new PositionManager address\"}},\"getPositionManagers(uint256,uint256)\":{\"params\":{\"cursor\":\"is the aforementioned cursor. It simply indicates the starting index for enumeration. The first call should pass 0, and subsequent calls should pass the returned newCursor.\",\"howMany\":\"indicates how many items should be returned. If there aren\\u2019t enough remaining items in the array, the function will return fewer items.\"},\"returns\":{\"managers\":\"address[] return array of PositionManager addresses\",\"newCursor\":\"uint256 return the new cursor\"}},\"getPositionManagersLength()\":{\"returns\":{\"_0\":\"uint256 return length of PositionManager array\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"updateActionData((address,uint8,bytes4[]))\":{\"params\":{\"facetAction\":\"facet of the action to add or remove from position manager factory\"}},\"updateDiamond(address,(address,uint8,bytes4[])[])\":{\"details\":\"Add (0) Replace(1) Remove(2)\",\"params\":{\"actionsToUpdate\":\"contains the facet addresses and function selectors of the actions\",\"positionManager\":\"address of the position manager on which one should modified an action\"}}},\"version\":1},\"userdoc\":{\"events\":{\"PositionManagerCreated(address,address)\":{\"notice\":\"emitted when a new position manager is created\"}},\"kind\":\"user\",\"methods\":{\"create()\":{\"notice\":\"deploy new positionManager and assign to userAddress\"},\"getPositionManagers(uint256,uint256)\":{\"notice\":\"get the array of position manager addresses\"},\"getPositionManagersLength()\":{\"notice\":\"get the length of position manager array\"},\"pause()\":{\"notice\":\"pause the factory\"},\"unpause()\":{\"notice\":\"unpause the factory\"},\"updateActionData((address,uint8,bytes4[]))\":{\"notice\":\"adds or removes an action to/from the factory\"},\"updateDiamond(address,(address,uint8,bytes4[])[])\":{\"notice\":\"update actions already existing on positionManager\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PositionManagerFactory.sol\":\"PositionManagerFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x9abeffe138f098b16557187383ba0f9e8503602fa95cd668132986ee115237ed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC721Receiver.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers. \\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721Holder is IERC721Receiver {\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x4dded98c5912fe68c28806a9a14eb13daf7f0c74715658008dfe10a0c3f30b05\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2789dfea2d73182683d637db5729201f6730dae6113030a94c828f8688f38f2f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc82c7d1d732081d9bd23f1555ebdf8f3bc1738bc42c2bfc4b9aa7564d9fa3573\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x05604ffcf69e416b8a42728bb0e4fd75170d8fac70bf1a284afeb4752a9bc52f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x4c5617b558186dc4b2b994b18ab9236410cd2dd1d9ad1213bbcca2e1d5321ce8\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title ERC721 with permit\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\ninterface IERC721Permit is IERC721 {\\n    /// @notice The permit typehash used in the permit signature\\n    /// @return The typehash for the permit\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice The domain separator used in the permit signature\\n    /// @return The domain seperator used in encoding of permit signature\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Approve of a specific token ID for spending by spender via signature\\n    /// @param spender The account that is being approved\\n    /// @param tokenId The ID of the token that is being approved for spending\\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol';\\n\\nimport './IPoolInitializer.sol';\\nimport './IERC721Permit.sol';\\nimport './IPeripheryPayments.sol';\\nimport './IPeripheryImmutableState.sol';\\nimport '../libraries/PoolAddress.sol';\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager is\\n    IPoolInitializer,\\n    IPeripheryPayments,\\n    IPeripheryImmutableState,\\n    IERC721Metadata,\\n    IERC721Enumerable,\\n    IERC721Permit\\n{\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0xe1dadc73e60bf05d0b4e0f05bd2847c5783e833cc10352c14763360b13495ee1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\\n\",\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/PositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\\\";\\nimport \\\"./libraries/ERC20Helper.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n\\n/**\\n * @title   Position Manager\\n * @notice  A vault that provides liquidity on Uniswap V3.\\n * @notice  User can Deposit here its Uni-v3 position\\n * @notice  If user does so, he is sure that idle liquidity will always be employed in protocols\\n * @notice  User will pay fee to external keepers\\n * @notice  vault works for multiple positions\\n */\\n\\ncontract PositionManager is IPositionManager, ERC721Holder, Initializable {\\n    using SafeMath for uint256;\\n\\n    uint256[] private runningPositionIds;\\n    uint256[] private closedPositionIds;\\n    uint256 private positionIdCounter;\\n    uint256[] private tokenIds;\\n\\n    mapping(uint256 => PositionInfo) public positions;\\n\\n    mapping(uint256 => mapping(address => bytes32)) public positionToModuleData;\\n\\n    ///@notice emitted when a ERC20 is withdrawn\\n    ///@param tokenAddress address of the ERC20\\n    ///@param to address of the user\\n    ///@param amount of the ERC20\\n    event ERC20Withdrawn(address tokenAddress, address to, uint256 amount);\\n\\n    ///@notice modifier to check if the msg.sender is the owner\\n    modifier onlyOwner() {\\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\\n        require(msg.sender == Storage.owner, \\\"PMOO\\\");\\n        _;\\n    }\\n\\n    ///@notice modifier to check if the msg.sender is the governance\\n    modifier onlyGovernance() {\\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\\n        require(msg.sender == Storage.registry.governance(), \\\"PMOG\\\");\\n        _;\\n    }\\n\\n    ///@notice modifier to check if the msg.sender is whitelisted\\n    modifier onlyWhitelisted() {\\n        require(_calledFromActiveModule(msg.sender) || msg.sender == address(this), \\\"PMOW\\\");\\n        _;\\n    }\\n\\n    ///@notice modifier to check if the msg.sender is the PositionManagerFactory\\n    modifier onlyFactory() {\\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\\n        require(Storage.registry.positionManagerFactoryAddress() == msg.sender, \\\"PMOF\\\");\\n        _;\\n    }\\n\\n    ///@notice modifier to check if the position is owned by the positionManager\\n    modifier onlyOwnedPosition(uint256 tokenId) {\\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\\n        require(\\n            INonfungiblePositionManager(Storage.uniswapAddressHolder.nonfungiblePositionManagerAddress()).ownerOf(\\n                tokenId\\n            ) == address(this),\\n            \\\"PMOOP\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@notice modifier to check if the position exists\\n    modifier positionExists(uint256 positionId) {\\n        require(positions[positionId].tokenId != 0, \\\"PMPE\\\");\\n        _;\\n    }\\n\\n    ///@notice modifier to check if the position is running\\n    modifier positionRunning(uint256 positionId) {\\n        require(_isPositionRunning(positionId), \\\"PMPR\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner, address _diamondCutFacet, address _registry) payable {\\n        PositionManagerStorage.setContractOwner(_owner);\\n\\n        // Add the diamondCut external function from the diamondCutFacet\\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\\n        bytes4[] memory functionSelectors = new bytes4[](1);\\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\\n        cut[0] = IDiamondCut.FacetCut({\\n            facetAddress: _diamondCutFacet,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: functionSelectors\\n        });\\n        PositionManagerStorage.diamondCut(cut, address(0), \\\"\\\");\\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\\n        Storage.registry = IRegistry(_registry);\\n    }\\n\\n    function init(address _owner, address _uniswapAddressHolder) public onlyFactory initializer {\\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\\n        Storage.owner = _owner;\\n        Storage.uniswapAddressHolder = IUniswapAddressHolder(_uniswapAddressHolder);\\n    }\\n\\n    ///@notice generate position ID\\n    ///@return positionId ID of the position\\n    function _genPositionId() internal returns (uint256) {\\n        return ++positionIdCounter;\\n    }\\n\\n    ///@notice create position\\n    ///@param inputs struct containing position info\\n    ///@return positionId ID of the position\\n    function createPosition(\\n        IPositionManager.CreatePositionInput calldata inputs\\n    ) external override onlyWhitelisted returns (uint256 positionId) {\\n        positionId = _genPositionId();\\n        runningPositionIds.push(positionId);\\n        positions[positionId] = PositionInfo({\\n            tokenId: inputs.tokenId,\\n            strategyProvider: inputs.strategyProvider,\\n            strategyId: inputs.strategyId,\\n            totalDepositUSDValue: inputs.totalDepositUSDValue,\\n            amount0CollectedFee: 0,\\n            amount1CollectedFee: 0,\\n            amount0Leftover: inputs.amount0Leftover,\\n            amount1Leftover: inputs.amount1Leftover,\\n            tickLowerDiff: inputs.tickLowerDiff,\\n            tickUpperDiff: inputs.tickUpperDiff,\\n            amount0Returned: 0,\\n            amount1Returned: 0,\\n            amount0ReturnedUsdValue: 0,\\n            amount1ReturnedUsdValue: 0\\n        });\\n\\n        _pushTokenId(inputs.tokenId);\\n        _setDefaultDataOfPosition(positionId);\\n    }\\n\\n    ///@notice close position\\n    ///@param positionId ID of the position\\n    function _closePosition(uint256 positionId) internal positionRunning(positionId) {\\n        _removeFromRunningPosition(positionId);\\n        closedPositionIds.push(positionId);\\n    }\\n\\n    ///@notice remove position from runningPositionIds array\\n    ///@param positionId ID of the position\\n    function _removeFromRunningPosition(uint256 positionId) internal {\\n        for (uint256 i; i < runningPositionIds.length; ++i) {\\n            if (runningPositionIds[i] == positionId) {\\n                runningPositionIds[i] = runningPositionIds[runningPositionIds.length - 1];\\n                runningPositionIds.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    ///@notice update position total deposit USD value\\n    ///@param positionId ID of the position\\n    ///@param _totalDepositUSDValue The total deposit value in USD\\n    ///@param _amount0Leftover The amount of token0 leftover after increase liquidity\\n    ///@param _amount1Leftover The amount of token1 leftover after increase liquidity\\n    function middlewareIncreaseLiquidity(\\n        uint256 positionId,\\n        uint256 _totalDepositUSDValue,\\n        uint256 _amount0Leftover,\\n        uint256 _amount1Leftover\\n    ) external override onlyWhitelisted positionExists(positionId) {\\n        positions[positionId].totalDepositUSDValue = _totalDepositUSDValue;\\n        positions[positionId].amount0Leftover = _amount0Leftover;\\n        positions[positionId].amount1Leftover = _amount1Leftover;\\n    }\\n\\n    ///@notice get position info from tokenId\\n    ///@param tokenId ID of the position\\n    ///@return positionInfo PositionInfo struct\\n    function getPositionInfoFromTokenId(\\n        uint256 tokenId\\n    ) external view override returns (PositionInfo memory positionInfo) {\\n        for (uint256 i; i < runningPositionIds.length; ++i) {\\n            uint256 positionId = runningPositionIds[i];\\n            if (positions[positionId].tokenId == tokenId) {\\n                return positions[positionId];\\n            }\\n        }\\n        for (uint256 i; i < closedPositionIds.length; ++i) {\\n            uint256 positionId = closedPositionIds[i];\\n            if (positions[positionId].tokenId == tokenId) {\\n                return positions[positionId];\\n            }\\n        }\\n        require(false, \\\"PMS\\\");\\n    }\\n\\n    ///@notice get position info from positionId\\n    ///@param positionId ID of the position\\n    ///@return positionInfo PositionInfo struct\\n    function getPositionInfo(uint256 positionId) external view override returns (PositionInfo memory positionInfo) {\\n        positionInfo = positions[positionId];\\n        require(positionInfo.tokenId != 0, \\\"PMS\\\");\\n    }\\n\\n    ///@notice check if the position is running\\n    ///@param positionId ID of the position\\n    ///@return bool true if the position is running\\n    function isPositionRunning(uint256 positionId) external view override returns (bool) {\\n        return _isPositionRunning(positionId);\\n    }\\n\\n    ///@notice middleware function to update position info for rebalance\\n    ///@param positionId ID of the position\\n    ///@param newTokenId ID of the new NFT\\n    ///@param tickLowerDiff The difference between the current tick and the tickLower\\n    ///@param tickUpperDiff The difference between the current tick and the tickUpper\\n    ///@param amount0CollectedFee The amount of token0 collected fee after rebalance\\n    ///@param amount1CollectedFee The amount of token1 collected fee after rebalance\\n    function middlewareRebalance(\\n        uint256 positionId,\\n        uint256 newTokenId,\\n        int24 tickLowerDiff,\\n        int24 tickUpperDiff,\\n        uint256 amount0CollectedFee,\\n        uint256 amount1CollectedFee,\\n        uint256 amount0Leftover,\\n        uint256 amount1Leftover\\n    ) external override onlyWhitelisted positionRunning(positionId) {\\n        positions[positionId].tokenId = newTokenId;\\n        positions[positionId].tickLowerDiff = tickLowerDiff;\\n        positions[positionId].tickUpperDiff = tickUpperDiff;\\n        positions[positionId].amount0CollectedFee = amount0CollectedFee;\\n        positions[positionId].amount1CollectedFee = amount1CollectedFee;\\n        positions[positionId].amount0Leftover = amount0Leftover;\\n        positions[positionId].amount1Leftover = amount1Leftover;\\n\\n        _pushTokenId(newTokenId);\\n    }\\n\\n    ///@notice middleware function to update position info for withdraw\\n    ///@param input MiddlewareWithdrawInput struct\\n    function middlewareWithdraw(MiddlewareWithdrawInput memory input) external override onlyWhitelisted {\\n        positions[input.positionId].amount0CollectedFee = input.amount0CollectedFee;\\n        positions[input.positionId].amount1CollectedFee = input.amount1CollectedFee;\\n        positions[input.positionId].amount0Returned = input.amount0Returned;\\n        positions[input.positionId].amount1Returned = input.amount1Returned;\\n        positions[input.positionId].amount0ReturnedUsdValue = input.amount0ReturnedUsdValue;\\n        positions[input.positionId].amount1ReturnedUsdValue = input.amount1ReturnedUsdValue;\\n        positions[input.positionId].amount0Leftover = 0;\\n        positions[input.positionId].amount1Leftover = 0;\\n        _closePosition(input.positionId);\\n    }\\n\\n    ///@notice add tokenId in the uniswapNFTs array\\n    ///@param tokenId ID of the added NFT\\n    function _pushTokenId(uint256 tokenId) internal onlyOwnedPosition(tokenId) {\\n        tokenIds.push(tokenId);\\n    }\\n\\n    ///@notice get the IDs of uniswap NFTs\\n    ///@param cursor is the aforementioned cursor. It simply indicates the starting index for enumeration. The first call should pass 0, and subsequent calls should pass the returned newCursor.\\n    ///@param howMany indicates how many items should be returned. If there aren\\u2019t enough remaining items in the array, the function will return fewer items.\\n    ///@return nfts uint256[] return array of uniswap nft tokenId\\n    ///@return newCursor uint256 return the new cursor\\n    function getUniswapNFTs(\\n        uint256 cursor,\\n        uint256 howMany\\n    ) public view returns (uint256[] memory nfts, uint256 newCursor) {\\n        uint256 length = howMany;\\n        if (length > tokenIds.length - cursor) {\\n            length = tokenIds.length - cursor;\\n        }\\n\\n        nfts = new uint256[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            nfts[i] = tokenIds[cursor + i];\\n        }\\n\\n        return (nfts, cursor + length);\\n    }\\n\\n    ///@notice return the length of the uniswap NFTs array\\n    ///@return length of the array\\n    function getUniswapNFTsLength() external view returns (uint256) {\\n        return tokenIds.length;\\n    }\\n\\n    ///@notice get the IDs of the running positions\\n    ///@param cursor is the aforementioned cursor. It simply indicates the starting index for enumeration. The first call should pass 0, and subsequent calls should pass the returned newCursor.\\n    ///@param howMany indicates how many items should be returned. If there aren\\u2019t enough remaining items in the array, the function will return fewer items.\\n    ///@return runningPositions uint256[] return array of PositionManager running position IDs\\n    ///@return newCursor uint256 return the new cursor\\n    function getRunningPositions(\\n        uint256 cursor,\\n        uint256 howMany\\n    ) public view returns (uint256[] memory runningPositions, uint256 newCursor) {\\n        uint256 length = howMany;\\n        if (length > runningPositionIds.length - cursor) {\\n            length = runningPositionIds.length - cursor;\\n        }\\n\\n        runningPositions = new uint256[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            runningPositions[i] = runningPositionIds[cursor + i];\\n        }\\n\\n        return (runningPositions, cursor + length);\\n    }\\n\\n    ///@notice return the length of the running positions array\\n    ///@return length of the array\\n    function getRunningPositionsLength() external view returns (uint256) {\\n        return runningPositionIds.length;\\n    }\\n\\n    ///@notice get the IDs of the closed positions\\n    ///@param cursor is the aforementioned cursor. It simply indicates the starting index for enumeration. The first call should pass 0, and subsequent calls should pass the returned newCursor.\\n    ///@param howMany indicates how many items should be returned. If there aren\\u2019t enough remaining items in the array, the function will return fewer items.\\n    ///@return closedPositions uint256[] return array of PositionManager closed position IDs\\n    ///@return newCursor uint256 return the new cursor\\n    function getClosedPositions(\\n        uint256 cursor,\\n        uint256 howMany\\n    ) public view returns (uint256[] memory closedPositions, uint256 newCursor) {\\n        uint256 length = howMany;\\n        if (length > closedPositionIds.length - cursor) {\\n            length = closedPositionIds.length - cursor;\\n        }\\n\\n        closedPositions = new uint256[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            closedPositions[i] = closedPositionIds[cursor + i];\\n        }\\n\\n        return (closedPositions, cursor + length);\\n    }\\n\\n    ///@notice return the length of the closed positions array\\n    ///@return length of the array\\n    function getClosedPositionsLength() external view returns (uint256) {\\n        return closedPositionIds.length;\\n    }\\n\\n    ///@notice set default data for every module\\n    ///@param positionId ID of the position\\n    function _setDefaultDataOfPosition(uint256 positionId) internal {\\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\\n\\n        bytes32[] memory moduleKeys = Storage.registry.getModuleKeys();\\n\\n        uint256 moduleKeysLength = moduleKeys.length;\\n        for (uint256 i; i < moduleKeysLength; ++i) {\\n            IRegistry.Entry memory entry = Storage.registry.getModuleInfo(moduleKeys[i]);\\n            positionToModuleData[positionId][entry.contractAddress] = entry.defaultData;\\n        }\\n    }\\n\\n    ///@notice sets the data of a module of position\\n    ///@param positionId ID of the position\\n    ///@param moduleAddress address of the module\\n    ///@param data data for the module\\n    function setModuleData(uint256 positionId, address moduleAddress, bytes32 data) external override onlyWhitelisted {\\n        positionToModuleData[positionId][moduleAddress] = data;\\n    }\\n\\n    ///@notice get data for a module of position\\n    ///@param _positionId ID of the position\\n    ///@param _moduleAddress address of the module\\n    ///@return data of the module\\n    function getPositionModuleData(\\n        uint256 _positionId,\\n        address _moduleAddress\\n    ) public view override returns (bytes32 data) {\\n        return (positionToModuleData[_positionId][_moduleAddress]);\\n    }\\n\\n    ///@notice get position lower tick diff and upper tick diff\\n    ///@param positionId ID of the position\\n    ///@return tickLowerDiff difference between the current tick of the position and the provied lower tick\\n    ///@return tickUpperDiff difference between the current tick of the position and the provied upper tick\\n    function getPositionTickDiffs(\\n        uint256 positionId\\n    ) external view override positionExists(positionId) returns (int24, int24) {\\n        return (positions[positionId].tickLowerDiff, positions[positionId].tickUpperDiff);\\n    }\\n\\n    ///@notice return the address of this position manager owner\\n    ///@return address of the owner\\n    function getOwner() external view override returns (address) {\\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\\n        return Storage.owner;\\n    }\\n\\n    ///@notice transfer ERC20 tokens stuck in Position Manager to owner\\n    ///@param tokenAddress address of the token to be withdrawn\\n    function withdrawERC20ToOwner(address tokenAddress, uint256 amount) external onlyGovernance {\\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\\n        address owner = Storage.owner;\\n        uint256 got = ERC20Helper._withdrawTokens(tokenAddress, owner, amount);\\n\\n        require(amount == got, \\\"PME\\\");\\n        emit ERC20Withdrawn(tokenAddress, owner, got);\\n    }\\n\\n    function _isPositionRunning(uint256 positionId) internal view returns (bool) {\\n        for (uint256 i = 0; i < runningPositionIds.length; ++i) {\\n            if (runningPositionIds[i] == positionId) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    ///@notice function to check if an address corresponds to an active module (or this contract)\\n    ///@param _address input address\\n    ///@return boolean true if the address is an active module\\n    function _calledFromActiveModule(address _address) internal view returns (bool) {\\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\\n        bytes32[] memory keys = Storage.registry.getModuleKeys();\\n\\n        uint256 keysLength = keys.length;\\n        for (uint256 i; i < keysLength; ++i) {\\n            if (Storage.registry.getModuleInfo(keys[i]).contractAddress == _address) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    fallback() external payable onlyWhitelisted {\\n        StorageStruct storage Storage = PositionManagerStorage.getStorage();\\n\\n        address facet = Storage.selectorToFacetAndPosition[msg.sig].facetAddress;\\n        require(facet != address(0), \\\"PM\\\");\\n\\n        ///@dev Execute external function from facet using delegatecall and return any value.\\n        assembly {\\n            // copy function selector and any arguments\\n            calldatacopy(0, 0, calldatasize())\\n            // execute function call using the facet\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n            // get any return value\\n            returndatacopy(0, 0, returndatasize())\\n            // return any return value or error back to the caller\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x1de9ed8fa4f0bd57b59a6cfeff31b5916b88c2da4195e5cb538dc9c4b9c3fc3b\",\"license\":\"GPL-2.0\"},\"contracts/PositionManagerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./PositionManager.sol\\\";\\nimport \\\"./interfaces/IPositionManagerFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./interfaces/IStrategyProviderWalletFactory.sol\\\";\\n\\ncontract PositionManagerFactory is Pausable, IPositionManagerFactory {\\n    using SafeMath for uint256;\\n\\n    address public immutable registry;\\n    address public immutable diamondCutFacet;\\n    address public immutable uniswapAddressHolder;\\n    address[] public positionManagers;\\n    IDiamondCut.FacetCut[] public actions;\\n    mapping(address => address) public override userToPositionManager;\\n\\n    ///@notice emitted when a new position manager is created\\n    ///@param positionManager address of PositionManager\\n    ///@param user address of user\\n    event PositionManagerCreated(address indexed positionManager, address user);\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == IRegistry(registry).governance(), \\\"PFG\\\");\\n        _;\\n    }\\n\\n    constructor(address _registry, address _diamondCutFacet, address _uniswapAddressHolder) Pausable() {\\n        registry = _registry;\\n        diamondCutFacet = _diamondCutFacet;\\n        uniswapAddressHolder = _uniswapAddressHolder;\\n    }\\n\\n    ///@notice pause the factory\\n    function pause() external onlyGovernance {\\n        _pause();\\n    }\\n\\n    ///@notice unpause the factory\\n    function unpause() external onlyGovernance {\\n        _unpause();\\n    }\\n\\n    ///@notice update actions already existing on positionManager\\n    ///@dev Add (0) Replace(1) Remove(2)\\n    ///@param positionManager address of the position manager on which one should modified an action\\n    ///@param actionsToUpdate contains the facet addresses and function selectors of the actions\\n    function updateDiamond(\\n        address positionManager,\\n        IDiamondCut.FacetCut[] memory actionsToUpdate\\n    ) external onlyGovernance {\\n        IDiamondCut(positionManager).diamondCut(actionsToUpdate, address(0), \\\"\\\");\\n    }\\n\\n    ///@notice adds or removes an action to/from the factory\\n    ///@param facetAction facet of the action to add or remove from position manager factory\\n    function updateActionData(IDiamondCut.FacetCut calldata facetAction) external onlyGovernance {\\n        if (facetAction.action == IDiamondCut.FacetCutAction.Remove) {\\n            uint256 actionsLength = actions.length;\\n            for (uint256 i; i < actionsLength; ++i) {\\n                if (actions[i].facetAddress == facetAction.facetAddress) {\\n                    actions[i] = actions[actionsLength - 1];\\n                    actions.pop();\\n                    return;\\n                }\\n            }\\n            require(false, \\\"PFU\\\");\\n        }\\n\\n        if (facetAction.action == IDiamondCut.FacetCutAction.Replace) {\\n            uint256 actionsLength = actions.length;\\n            for (uint256 i; i < actionsLength; ++i) {\\n                if (actions[i].facetAddress == facetAction.facetAddress) {\\n                    actions[i] = facetAction;\\n                    return;\\n                }\\n            }\\n            require(false, \\\"PFU\\\");\\n        }\\n\\n        if (facetAction.action == IDiamondCut.FacetCutAction.Add) {\\n            uint256 actionsLength = actions.length;\\n            for (uint256 i; i < actionsLength; ++i) {\\n                require(actions[i].facetAddress != facetAction.facetAddress, \\\"PFU\\\");\\n            }\\n            actions.push(facetAction);\\n            return;\\n        }\\n\\n        require(false, \\\"PFU\\\");\\n    }\\n\\n    ///@notice deploy new positionManager and assign to userAddress\\n    ///@return address return new PositionManager address\\n    function create() external override whenNotPaused returns (address) {\\n        require(userToPositionManager[msg.sender] == address(0), \\\"PFP\\\");\\n\\n        PositionManager manager = new PositionManager(msg.sender, diamondCutFacet, registry);\\n        positionManagers.push(address(manager));\\n        userToPositionManager[msg.sender] = address(manager);\\n        manager.init(msg.sender, uniswapAddressHolder);\\n        IDiamondCut(address(manager)).diamondCut(actions, address(0), \\\"\\\");\\n\\n        ///@dev create strategy provider wallet\\n        _createStrategyProviderWallet(msg.sender);\\n\\n        emit PositionManagerCreated(address(manager), msg.sender);\\n\\n        return address(manager);\\n    }\\n\\n    ///@notice create strategy provider wallet\\n    function _createStrategyProviderWallet(address provider) internal {\\n        IStrategyProviderWalletFactory(IRegistry(registry).strategyProviderWalletFactoryAddress()).create(provider);\\n    }\\n\\n    ///@notice get the array of position manager addresses\\n    ///@param cursor is the aforementioned cursor. It simply indicates the starting index for enumeration. The first call should pass 0, and subsequent calls should pass the returned newCursor.\\n    ///@param howMany indicates how many items should be returned. If there aren\\u2019t enough remaining items in the array, the function will return fewer items.\\n    ///@return managers address[] return array of PositionManager addresses\\n    ///@return newCursor uint256 return the new cursor\\n    function getPositionManagers(\\n        uint256 cursor,\\n        uint256 howMany\\n    ) public view returns (address[] memory managers, uint256 newCursor) {\\n        uint256 length = howMany;\\n        if (length > positionManagers.length - cursor) {\\n            length = positionManagers.length - cursor;\\n        }\\n\\n        managers = new address[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            managers[i] = positionManagers[cursor + i];\\n        }\\n\\n        return (managers, cursor + length);\\n    }\\n\\n    ///@notice get the length of position manager array\\n    ///@return uint256 return length of PositionManager array\\n    function getPositionManagersLength() external view returns (uint256) {\\n        return positionManagers.length;\\n    }\\n}\\n\",\"keccak256\":\"0x7518c857e54177d198796c806ede4b53f7824df836d442019e8cd33dd86d5a80\",\"license\":\"GPL-2.0\"},\"contracts/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./interfaces/IPositionManager.sol\\\";\\nimport \\\"./interfaces/IUniswapAddressHolder.sol\\\";\\nimport \\\"./interfaces/IDiamondCut.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\n\\nstruct FacetAddressAndPosition {\\n    address facetAddress;\\n    uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n}\\n\\nstruct FacetFunctionSelectors {\\n    bytes4[] functionSelectors;\\n    uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n}\\n\\nstruct StorageStruct {\\n    // maps function selector to the facet address and\\n    // the position of the selector in the facetFunctionSelectors.selectors array\\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n    // maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n    // facet addresses\\n    address[] facetAddresses;\\n    IUniswapAddressHolder uniswapAddressHolder;\\n    address owner;\\n    IRegistry registry;\\n    mapping(bytes32 => bytes32) storageVars;\\n}\\n\\nlibrary PositionManagerStorage {\\n    bytes32 private constant key = keccak256(\\\"position-manager-storage-location\\\");\\n\\n    ///@notice get the storage from memory location\\n    ///@return s the storage struct\\n    function getStorage() internal pure returns (StorageStruct storage s) {\\n        bytes32 k = key;\\n        assembly {\\n            s.slot := k\\n        }\\n    }\\n\\n    ///@notice emitted when a contract changes ownership\\n    ///@param previousOwner previous owner of the contract\\n    ///@param newOwner new owner of the contract\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    ///@notice set the owner field on the storage struct\\n    ///@param _newOwner new owner of the storage struct\\n    function setContractOwner(address _newOwner) internal {\\n        require(_newOwner != address(0), \\\"SNO\\\");\\n        StorageStruct storage ds = getStorage();\\n        address previousOwner = ds.owner;\\n        ds.owner = _newOwner;\\n        if (_newOwner != previousOwner) {\\n            emit OwnershipTransferred(previousOwner, _newOwner);\\n        }\\n    }\\n\\n    ///@notice make sure that a function is called by the PositionManagerFactory contract\\n    function enforceIsGovernance() internal view {\\n        StorageStruct storage ds = getStorage();\\n        require(msg.sender == ds.registry.positionManagerFactoryAddress(), \\\"SMF\\\");\\n    }\\n\\n    ///@notice emitted when a facet is cut into the diamond\\n    ///@param _diamondCut facet cut\\n    ///@param _init diamond cut init address\\n    ///@param _calldata facet cut calldata\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    ///@notice Internal function version of diamondCut\\n    ///@param _diamondCut facet cut\\n    ///@param _init diamond cut init address\\n    ///@param _calldata facet cut calldata\\n    function diamondCut(IDiamondCut.FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n        uint256 _diamondCutLength = _diamondCut.length;\\n        for (uint256 facetIndex; facetIndex < _diamondCutLength; ++facetIndex) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"SIF\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    ///@notice Add functions to facet\\n    ///@param _facetAddress address of the facet\\n    ///@param _functionSelectors function selectors to add\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length != 0, \\\"SNS\\\");\\n        StorageStruct storage ds = getStorage();\\n        require(_facetAddress != address(0), \\\"SA0\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n\\n        uint256 _functionSelectorsLength = _functionSelectors.length;\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectorsLength; ++selectorIndex) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"SFE\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    ///@notice Add facet by address\\n    ///@param ds storage struct\\n    ///@param _facetAddress address of the facet\\n    function addFacet(StorageStruct storage ds, address _facetAddress) internal {\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n    ///@notice Add single function to facet\\n    ///@param ds storage struct\\n    ///@param _selector function selector to add\\n    ///@param _selectorPosition position of the function selector in the facetFunctionSelectors array\\n    function addFunction(\\n        StorageStruct storage ds,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    ///@notice Remove single function from facet\\n    ///@param ds storage struct\\n    ///@param _facetAddress address of the facet\\n    ///@param _selector function selector to remove\\n    function removeFunction(StorageStruct storage ds, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"SRE\\\");\\n        require(_facetAddress != address(this), \\\"SRI\\\");\\n\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    ///@notice Replace functions in facet\\n    ///@param _facetAddress address of the facet\\n    ///@param _functionSelectors function selectors to replace\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length != 0, \\\"SRF\\\");\\n        StorageStruct storage ds = getStorage();\\n        require(_facetAddress != address(0), \\\"SR0\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n\\n        uint256 _functionSelectorsLength = _functionSelectors.length;\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectorsLength; ++selectorIndex) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n\\n            require(oldFacetAddress != _facetAddress, \\\"SRR\\\");\\n\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    ///@notice remove functions in facet\\n    ///@param _facetAddress address of the facet\\n    ///@param _functionSelectors function selectors to remove\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length != 0, \\\"SES\\\");\\n\\n        StorageStruct storage ds = getStorage();\\n\\n        require(_facetAddress == address(0), \\\"SE0\\\");\\n\\n        uint256 _functionSelectorsLength = _functionSelectors.length;\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectorsLength; ++selectorIndex) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    ///@notice Initialize the diamond cut\\n    ///@param _init delegatecall address\\n    ///@param _calldata delegatecall data\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"SI0\\\");\\n        } else {\\n            require(_calldata.length != 0, \\\"SIC\\\");\\n\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n\\n            if (!success) {\\n                if (error.length != 0) {\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"SIR\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    ///@notice check to verify that the key is valid and already whitelisted by governance\\n    ///@param hashedKey key to check\\n    modifier verifyKey(bytes32 hashedKey) {\\n        StorageStruct storage ds = getStorage();\\n\\n        bytes32 storageVariableHash = ds.storageVars[hashedKey];\\n\\n        require(storageVariableHash == bytes32(uint256(1)), \\\"SDK\\\");\\n        _;\\n    }\\n\\n    ///@notice get a specific slot of memory by the given key and read the first 32 bytes\\n    ///@param hashedKey key to read from\\n    function getDynamicStorageValue(bytes32 hashedKey) internal view verifyKey(hashedKey) returns (bytes32 value) {\\n        assembly {\\n            value := sload(hashedKey)\\n        }\\n    }\\n\\n    ///@dev supposing we've already set the key on the mapping, we can't insert a wrong key\\n    ///@notice set a specific slot of memory by the given key and write the first 32 bytes\\n    ///@param hashedKey key to write to\\n    ///@param value value to write\\n    function setDynamicStorageValue(bytes32 hashedKey, bytes32 value) internal verifyKey(hashedKey) {\\n        assembly {\\n            sstore(hashedKey, value)\\n        }\\n    }\\n\\n    ///@notice add a new hashedKey to the mapping in storage, sort of whitelist\\n    ///@param hashedKey key to add to the mapping\\n    function addDynamicStorageKey(bytes32 hashedKey) internal {\\n        StorageStruct storage ds = getStorage();\\n\\n        bytes32 storageVariableHash = ds.storageVars[hashedKey];\\n\\n        ///@dev return if the key already exists\\n        if (storageVariableHash != bytes32(0)) return;\\n\\n        ds.storageVars[hashedKey] = bytes32(uint256(1));\\n    }\\n}\\n\",\"keccak256\":\"0x4f65978abc8184c6d43db62e691c8ccf1e98e5dfdd1011baebbbe3e472c2df1b\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x51d83386aa10023cb9585d489b9bf7489aa7e43e6996fa67d01a856b8be25fdd\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IPositionManager {\\n    struct PositionInfo {\\n        uint256 tokenId;\\n        address strategyProvider;\\n        bytes16 strategyId;\\n        uint256 totalDepositUSDValue;\\n        uint256 amount0CollectedFee;\\n        uint256 amount1CollectedFee;\\n        uint256 amount0Leftover;\\n        uint256 amount1Leftover;\\n        int24 tickLowerDiff;\\n        int24 tickUpperDiff;\\n        uint256 amount0Returned;\\n        uint256 amount1Returned;\\n        uint256 amount0ReturnedUsdValue;\\n        uint256 amount1ReturnedUsdValue;\\n    }\\n\\n    ///@notice create position\\n    ///@param tokenId ID of the position\\n    ///@param strategyProvider The address of the strategy provider\\n    ///@param strategyId The ID of the strategy\\n    ///@param totalDepositUSDValue The total deposit value in USD\\n    ///@param tickLowerDiff difference between the current tick of the position and the provied lower tick\\n    ///@param tickUpperDiff difference between the current tick of the position and the provied upper tick\\n    ///@param amount0Leftover The amount of token0 leftover after rebalance\\n    ///@param amount1Leftover The amount of token1 leftover after rebalance\\n    struct CreatePositionInput {\\n        uint256 tokenId;\\n        address strategyProvider;\\n        bytes16 strategyId;\\n        uint256 totalDepositUSDValue;\\n        int24 tickLowerDiff;\\n        int24 tickUpperDiff;\\n        uint256 amount0Leftover;\\n        uint256 amount1Leftover;\\n    }\\n\\n    ///@notice create position\\n    ///@param inputs CreatePositionInput struct\\n    ///@return positionId ID of the position\\n    function createPosition(CreatePositionInput calldata inputs) external returns (uint256 positionId);\\n\\n    ///@notice update position total deposit USD value\\n    ///@param positionId ID of the position\\n    ///@param _totalDepositUSDValue The total deposit value in USD\\n    ///@param _amount0Leftover The amount of token0 leftover after increasing liquidity\\n    ///@param _amount1Leftover The amount of token1 leftover after increasing liquidity\\n    function middlewareIncreaseLiquidity(\\n        uint256 positionId,\\n        uint256 _totalDepositUSDValue,\\n        uint256 _amount0Leftover,\\n        uint256 _amount1Leftover\\n    ) external;\\n\\n    ///@notice get position info from tokenId\\n    ///@param tokenId ID of the position\\n    ///@return positionInfo PositionInfo struct\\n    function getPositionInfoFromTokenId(uint256 tokenId) external view returns (PositionInfo memory positionInfo);\\n\\n    ///@notice get position info from positionId\\n    ///@param positionId ID of the position\\n    ///@return positionInfo PositionInfo struct\\n    function getPositionInfo(uint256 positionId) external view returns (PositionInfo memory positionInfo);\\n\\n    ///@notice check if the position is running\\n    ///@param positionId ID of the position\\n    ///@return bool true if the position is running\\n    function isPositionRunning(uint256 positionId) external view returns (bool);\\n\\n    ///@notice middleware function to update position info for rebalance\\n    ///@param positionId ID of the position\\n    ///@param newTokenId ID of the new NFT\\n    ///@param tickLowerDiff The difference between the current tick and the tickLower\\n    ///@param tickUpperDiff The difference between the current tick and the tickUpper\\n    ///@param amount0CollectedFee The amount of token0 collected fee after rebalance\\n    ///@param amount1CollectedFee The amount of token1 collected fee after rebalance\\n    ///@param amount0Leftover The amount of token0 leftover after rebalance\\n    ///@param amount1Leftover The amount of token1 leftover after rebalance\\n    function middlewareRebalance(\\n        uint256 positionId,\\n        uint256 newTokenId,\\n        int24 tickLowerDiff,\\n        int24 tickUpperDiff,\\n        uint256 amount0CollectedFee,\\n        uint256 amount1CollectedFee,\\n        uint256 amount0Leftover,\\n        uint256 amount1Leftover\\n    ) external;\\n\\n    ///@notice struct for middleware withdraw\\n    ///@param positionId ID of the position\\n    ///@param amount0CollectedFee The amount of token0 collected fee after withdrwan\\n    ///@param amount1CollectedFee The amount of token1 collected fee after withdrwan\\n    ///@param amount0Returned The amount of token0 returned after withdrwan\\n    ///@param amount1Returned The amount of token1 returned after withdrwan\\n    ///@param amount0ReturnedUsdValue The amount of token0 returned in USD after withdrwan\\n    ///@param amount1ReturnedUsdValue The amount of token1 returned in USD after withdrwan\\n    struct MiddlewareWithdrawInput {\\n        uint256 positionId;\\n        uint256 amount0CollectedFee;\\n        uint256 amount1CollectedFee;\\n        uint256 amount0Returned;\\n        uint256 amount1Returned;\\n        uint256 amount0ReturnedUsdValue;\\n        uint256 amount1ReturnedUsdValue;\\n    }\\n\\n    ///@notice middleware function to update position info for withdraw\\n    ///@param input MiddlewareWithdrawInput struct\\n    function middlewareWithdraw(MiddlewareWithdrawInput memory input) external;\\n\\n    function setModuleData(uint256 positionId, address moduleAddress, bytes32 data) external;\\n\\n    function getPositionModuleData(uint256 _positionId, address _moduleAddress) external view returns (bytes32 data);\\n\\n    ///@notice get position lower tick diff and upper tick diff\\n    ///@param positionId ID of the position\\n    ///@return tickLowerDiff difference between the current tick of the position and the provied lower tick\\n    ///@return tickUpperDiff difference between the current tick of the position and the provied upper tick\\n    function getPositionTickDiffs(uint256 positionId) external view returns (int24, int24);\\n\\n    function getOwner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc94a4b4df0c27e8645f23f711765d4b932af0c17d8d92d63a239599d4715a5b6\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IPositionManagerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IPositionManagerFactory {\\n    function create() external returns (address);\\n\\n    function userToPositionManager(address _user) external view returns (address);\\n}\\n\",\"keccak256\":\"0xb881cf675d5e8453a56f35d3aa4eaf21479c8915479e51c9aacb6445248c4111\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IRegistry {\\n    struct Entry {\\n        address contractAddress;\\n        bytes32 defaultData;\\n    }\\n\\n    ///@notice check if the fee tier is allowable\\n    ///@param feeTier the fee tier to check\\n    ///@return true if the fee tier is allowable, false otherwise\\n    function isAllowableFeeTier(uint24 feeTier) external view returns (bool);\\n\\n    ///@notice get the list of fee tiers\\n    ///@return array of fee tiers\\n    function getFeeTiers() external view returns (uint24[] memory);\\n\\n    ///@notice get the list of allowable fee tiers\\n    ///@return array of allowable fee tiers\\n    function getAllowableFeeTiers() external view returns (uint24[] memory);\\n\\n    ///@notice return the address of PositionManagerFactory\\n    ///@return address of PositionManagerFactory\\n    function positionManagerFactoryAddress() external view returns (address);\\n\\n    ///@notice return the address of StrategyProviderWalletFactory\\n    ///@return address of StrategyProviderWalletFactory\\n    function strategyProviderWalletFactoryAddress() external view returns (address);\\n\\n    ///@notice return the address of weth9\\n    ///@return address of weth9\\n    function weth9() external view returns (address);\\n\\n    ///@notice return the address of Governance\\n    ///@return address of Governance\\n    function governance() external view returns (address);\\n\\n    ///@notice return the address of recipient of service fee\\n    ///@return address of recipient of service fee\\n    function serviceFeeRecipient() external view returns (address);\\n\\n    ///@notice return the max twap deviation\\n    ///@return int24 max twap deviation\\n    function maxTwapDeviation() external view returns (int24);\\n\\n    ///@notice return the twap duration\\n    ///@return uint32 twap duration\\n    function twapDuration() external view returns (uint32);\\n\\n    ///@notice return the address of USD value token\\n    ///@return address of USD value token\\n    function usdValueTokenAddress() external view returns (address);\\n\\n    ///@notice return the denominator of service fee ratio\\n    ///@return uint32 denominator of service fee ratio\\n    function serviceFeeDenominator() external view returns (uint32);\\n\\n    ///@notice return the address of Governance\\n    ///@return address of Governance\\n    function getModuleKeys() external view returns (bytes32[] memory);\\n\\n    ///@notice checks if the address is whitelisted as a keeper\\n    ///@param _keeper address to check\\n    ///@return bool true if the address is withelisted, false otherwise\\n    function whitelistedKeepers(address _keeper) external view returns (bool);\\n\\n    ///@notice get the module info by id\\n    ///@param _id id of the module\\n    ///@return Entry module info\\n    function getModuleInfo(bytes32 _id) external view returns (Entry memory);\\n\\n    ///@notice get service fee ratio for a given license amount\\n    ///@param _licenseAmount license amount to get service fee ratio\\n    function getServiceFeeRatioFromLicenseAmount(uint32 _licenseAmount) external view returns (uint32 ratio);\\n}\\n\",\"keccak256\":\"0xf01491fbe7aec6e223f1a90b69cc36b5ecee1386f23e0f052f19ff802195fe20\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IStrategyProviderWalletFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IStrategyProviderWalletFactory {\\n    function create(address provider) external returns (address);\\n\\n    function providerToWallet(address _provider) external view returns (address);\\n}\\n\",\"keccak256\":\"0xa8dca6681437612464330cad5709eb71c7270b8ca01cd40581fb34635f35f81f\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IUniswapAddressHolder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IUniswapAddressHolder {\\n    ///@notice default getter for nonfungiblePositionManagerAddress\\n    ///@return address The address of the non fungible position manager\\n    function nonfungiblePositionManagerAddress() external view returns (address);\\n\\n    ///@notice default getter for uniswapV3FactoryAddress\\n    ///@return address The address of the Uniswap V3 factory\\n    function uniswapV3FactoryAddress() external view returns (address);\\n\\n    ///@notice default getter for swapRouterAddress\\n    ///@return address The address of the swap router\\n    function swapRouterAddress() external view returns (address);\\n\\n    ///@notice Set the address of nonfungible position manager\\n    ///@param newAddress new address of nonfungible position manager\\n    function setNonFungibleAddress(address newAddress) external;\\n\\n    ///@notice Set the address of the Uniswap V3 factory\\n    ///@param newAddress new address of the Uniswap V3 factory\\n    function setFactoryAddress(address newAddress) external;\\n\\n    ///@notice Set the address of uniV3 swap router\\n    ///@param newAddress new address of univ3 swap router\\n    function setSwapRouterAddress(address newAddress) external;\\n\\n    ///@notice Set the address of the registry\\n    ///@param newAddress The address of the registry\\n    function setRegistry(address newAddress) external;\\n}\\n\",\"keccak256\":\"0xa374214150de7a23de55401eeb0f118c4ec739211b215fe9de989db5fbfecdf1\",\"license\":\"GPL-2.0\"},\"contracts/libraries/ERC20Helper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nlibrary ERC20Helper {\\n    ///@dev library to interact with ERC20 token\\n    using SafeERC20 for IERC20;\\n\\n    ///@notice approve the token to be able to transfer it\\n    ///@param token address of the token\\n    ///@param spender address of the spender\\n    ///@param amount amount to approve\\n    function _approveToken(address token, address spender, uint256 amount) internal {\\n        uint256 allowance = IERC20(token).allowance(address(this), spender);\\n        if (allowance >= amount) {\\n            return;\\n        }\\n        IERC20(token).safeIncreaseAllowance(spender, amount - allowance);\\n    }\\n\\n    ///@notice return the allowance of the token that the spender is able to spend\\n    ///@param token address of the token\\n    ///@param owner address of the owner\\n    ///@param spender address of the spender\\n    ///@return uint256 allowance amount\\n    function _getAllowance(address token, address owner, address spender) internal view returns (uint256) {\\n        return IERC20(token).allowance(owner, spender);\\n    }\\n\\n    ///@notice withdraw the tokens from the vault and send them to the user. Send all if the amount is greater than the vault's balance.\\n    ///@param token address of the token to withdraw\\n    ///@param to address of the user\\n    ///@param amount amount of tokens to withdraw\\n    function _withdrawTokens(address token, address to, uint256 amount) internal returns (uint256 amountOut) {\\n        uint256 balance = _getBalance(token, address(this));\\n\\n        if (amount >= balance) {\\n            amountOut = balance;\\n        } else {\\n            amountOut = amount;\\n        }\\n        IERC20(token).safeTransfer(to, amountOut);\\n    }\\n\\n    ///@notice get the balance of the token for the given address\\n    ///@param token address of the token\\n    ///@param account address of the account\\n    ///@return uint256 return the balance of the token for the given address\\n    function _getBalance(address token, address account) internal view returns (uint256) {\\n        return IERC20(token).balanceOf(account);\\n    }\\n}\\n\",\"keccak256\":\"0x2ed4089d37e6657b60738509fea5364409f10112b6d69a8bf36cac6d68ac30fa\",\"license\":\"GPL-2.0\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162005f3838038062005f38833981016040819052620000349162000083565b6000805460ff191690556001600160601b0319606093841b811660805291831b821660a05290911b1660c052620000cc565b80516001600160a01b03811681146200007e57600080fd5b919050565b60008060006060848603121562000098578283fd5b620000a38462000066565b9250620000b36020850162000066565b9150620000c36040850162000066565b90509250925092565b60805160601c60a05160601c60c05160601c615e0e6200012a600039806109f25280610c935250806109ce5280610b975250806102645280610350528061076c528061089d52806108fc5280610bb85280610ed85250615e0e6000f3fe60806040523480156200001157600080fd5b5060043610620001005760003560e01c806383240f831162000099578063c0f06ca4116200006f578063c0f06ca414620001e5578063c81e0f9114620001ef578063cd1719151462000206578063efc81a8c146200022d5762000100565b806383240f8314620001aa5780638456cb5914620001d1578063a051e9b314620001db5762000100565b80635c975abb11620000db5780635c975abb14620001595780636cbaebe51462000172578063766cadc414620001895780637b10399914620001a05762000100565b806320e467f614620001055780633f4ba83a14620001345780634d78530d1462000140575b600080fd5b6200011c62000116366004620012de565b62000237565b6040516200012b919062001343565b60405180910390f35b6200013e62000262565b005b6200014a6200033f565b6040516200012b919062001831565b6200016362000345565b6040516200012b9190620017cf565b6200013e62000183366004620012a3565b6200034e565b6200013e6200019a366004620010ea565b6200076a565b6200011c6200089b565b620001c1620001bb366004620012de565b620008bf565b6040516200012b92919062001394565b6200013e620008fa565b6200011c620009cc565b6200011c620009f0565b6200011c62000200366004620010a5565b62000a14565b6200021d62000217366004620012f7565b62000a2f565b6040516200012b929190620013b3565b6200011c62000b07565b600181815481106200024857600080fd5b6000918252602090912001546001600160a01b0316905081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015620002bc57600080fd5b505afa158015620002d1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002f79190620010cb565b6001600160a01b0316336001600160a01b031614620003335760405162461bcd60e51b81526004016200032a9062001814565b60405180910390fd5b6200033d62000da9565b565b60015490565b60005460ff1690565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015620003a857600080fd5b505afa158015620003bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003e39190620010cb565b6001600160a01b0316336001600160a01b031614620004165760405162461bcd60e51b81526004016200032a9062001814565b60026200042a604083016020840162001284565b60028111156200043657fe5b1415620005a75760025460005b818110156200058c576200045b6020840184620010a5565b6001600160a01b0316600282815481106200047257fe5b60009182526020909120600290910201546001600160a01b03161415620005835760026001830381548110620004a457fe5b906000526020600020906002020160028281548110620004c057fe5b600091825260209091208254600292830290910180546001600160a01b0319166001600160a01b03909216919091178082558354919260ff600160a01b938490041692849260ff60a01b19169184908111156200051957fe5b02179055506001828101805462000534928401919062000ff6565b5090505060028054806200054457fe5b60008281526020812060026000199093019283020180546001600160a81b03191681559062000577600183018262001059565b50509055505062000767565b60010162000443565b5060405162461bcd60e51b81526004016200032a90620017f7565b6001620005bb604083016020840162001284565b6002811115620005c757fe5b1415620006635760025460005b818110156200058c57620005ec6020840184620010a5565b6001600160a01b0316600282815481106200060357fe5b60009182526020909120600290910201546001600160a01b031614156200065a5782600282815481106200063357fe5b906000526020600020906002020181816200064f919062001982565b905050505062000767565b600101620005d4565b600062000677604083016020840162001284565b60028111156200068357fe5b14156200074d5760025460005b818110156200070357620006a86020840184620010a5565b6001600160a01b031660028281548110620006bf57fe5b60009182526020909120600290910201546001600160a01b03161415620006fa5760405162461bcd60e51b81526004016200032a90620017f7565b60010162000690565b506002805460018101825560008290528391027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0162000744828262001982565b50505062000767565b60405162461bcd60e51b81526004016200032a90620017f7565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015620007c457600080fd5b505afa158015620007d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007ff9190620010cb565b6001600160a01b0316336001600160a01b031614620008325760405162461bcd60e51b81526004016200032a9062001814565b6040516307e4c70760e21b81526001600160a01b03831690631f931c1c906200086390849060009060040162001406565b600060405180830381600087803b1580156200087e57600080fd5b505af115801562000893573d6000803e3d6000fd5b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60028181548110620008d057600080fd5b60009182526020909120600290910201546001600160a01b0381169150600160a01b900460ff1682565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156200095457600080fd5b505afa15801562000969573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200098f9190620010cb565b6001600160a01b0316336001600160a01b031614620009c25760405162461bcd60e51b81526004016200032a9062001814565b6200033d62000e4e565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6003602052600090815260409020546001600160a01b031681565b600154606090600090839085900381111562000a4d57506001548490035b8067ffffffffffffffff8111801562000a6557600080fd5b5060405190808252806020026020018201604052801562000a90578160200160208202803683370190505b50925060005b8181101562000afb5760018187018154811062000aaf57fe5b9060005260206000200160009054906101000a90046001600160a01b031684828151811062000ada57fe5b6001600160a01b039092166020928302919091019091015260010162000a96565b50840190509250929050565b600062000b1362000345565b1562000b59576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b336000908152600360205260409020546001600160a01b03161562000b925760405162461bcd60e51b81526004016200032a90620017da565b6000337f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060405162000be59062001080565b62000bf39392919062001371565b604051809103906000f08015801562000c10573d6000803e3d6000fd5b50600180548082019091557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0383166001600160a01b03199182168117909255336000818152600360205260409081902080549093168417909255905163784d200b60e11b8152929350909163f09a40169162000cbc917f00000000000000000000000000000000000000000000000000000000000000009060040162001357565b600060405180830381600087803b15801562000cd757600080fd5b505af115801562000cec573d6000803e3d6000fd5b50506040516307e4c70760e21b81526001600160a01b0384169250631f931c1c915062000d2290600290600090600401620014f5565b600060405180830381600087803b15801562000d3d57600080fd5b505af115801562000d52573d6000803e3d6000fd5b5050505062000d613362000ed6565b806001600160a01b03167fcd08baef8491fbefc9205236874e188ae474400c7fbf8022f3b86d97ec5bc40f3360405162000d9c919062001343565b60405180910390a2905090565b62000db362000345565b62000dfc576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa62000e3162000ff2565b604080516001600160a01b039092168252519081900360200190a1565b62000e5862000345565b1562000e9e576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25862000e3162000ff2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f80ffbd56040518163ffffffff1660e01b815260040160206040518083038186803b15801562000f3057600080fd5b505afa15801562000f45573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f6b9190620010cb565b6001600160a01b0316639ed93318826040518263ffffffff1660e01b815260040162000f98919062001343565b602060405180830381600087803b15801562000fb357600080fd5b505af115801562000fc8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fee9190620010cb565b5050565b3390565b8280548282559060005260206000209060070160089004810192821562001047576000526020600020916007016008900482015b82811115620010475782548255916001019190600101906200102a565b50620010559291506200108e565b5090565b5080546000825560070160089004906000526020600020908101906200076791906200108e565b61433a8062001a9f83390190565b5b808211156200105557600081556001016200108f565b600060208284031215620010b7578081fd5b8135620010c48162001a63565b9392505050565b600060208284031215620010dd578081fd5b8151620010c48162001a63565b60008060408385031215620010fd578081fd5b62001109833562001a63565b82359150602083013567ffffffffffffffff8082111562001128578283fd5b818501915085601f8301126200113c578283fd5b620011526200114c83356200185f565b6200183a565b82358152602080820191908401855b85358110156200127557813586016060818c03601f1901121562001183578788fd5b6040516060810181811088821117156200119957fe5b6040526020820135620011ac8162001a63565b8152620011bd604083013562001a90565b60408201356020820152606082013587811115620011d957898afd5b8083019250508b603f830112620011ee578889fd5b6020820135620012026200114c826200185f565b80828252602082019150604085018f604060208602880101111562001225578c8dfd5b8c95505b8386101562001256576200123e813562001a79565b80358352600195909501946020928301920162001229565b5060408401525050855250602093840193919091019060010162001161565b50959890975095505050505050565b60006020828403121562001296578081fd5b8135620010c48162001a90565b600060208284031215620012b5578081fd5b813567ffffffffffffffff811115620012cc578182fd5b820160608185031215620010c4578182fd5b600060208284031215620012f0578081fd5b5035919050565b600080604083850312156200130a578182fd5b50508035926020909101359150565b6001600160a01b03169052565b6001600160e01b0319169052565b600381106200133f57fe5b9052565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b038316815260408101620010c4602083018462001334565b604080825283519082018190526000906020906060840190828701845b82811015620013f75781516001600160a01b031684529284019290840190600101620013d0565b50505092019290925292915050565b606080825283518282018190526000919060809081850190602080820287018401818a01875b84811015620014c357898303607f19018652815180516001600160a01b031684528481015189850190620014638787018262001334565b506040918201519185018a9052815190819052908501908a90898601905b80831015620014ad5783516001600160e01b031916825292870192600192909201919087019062001481565b509786019794505050908301906001016200142c565b5050620014d38289018a62001319565b8781036040890152620014e7878262001831565b9a9950505050505050505050565b60006060825260608201845480825260808401915060206080818302860101878552818520855b848110156200179f57878303607f1901865281546001600160a01b03811684526200155185850160a083901c60ff1662001334565b5060016060604085015260608401818401546200156f818362001831565b91506200157e8386016200187e565b8a5b82600782011015620016455781546200159d858260e01b62001326565b6001600160e01b0319620015ba868c0160c084901b831662001326565b620015ce60408701828460a01b1662001326565b620015e260608701828460801b1662001326565b620015f660808701828460601b1662001326565b6200160a60a08701828460401b1662001326565b6200161d60c0870182848e1b1662001326565b6200162e60e0870182841662001326565b505061010093909301929084019060080162001580565b90549082811015620016675762001660848360e01b62001326565b9288019284015b8281101562001691576200168a8460c084901b6001600160e01b03191662001326565b9288019284015b82811015620016bb57620016b48460a084901b6001600160e01b03191662001326565b9288019284015b82811015620016e557620016de84608084901b6001600160e01b03191662001326565b9288019284015b828110156200170f576200170884606084901b6001600160e01b03191662001326565b9288019284015b8281101562001739576200173284604084901b6001600160e01b03191662001326565b9288019284015b8281101562001761576200175a84838b1b6001600160e01b03191662001326565b9288019284015b82811015620017855762001780846001600160e01b0319841662001326565b928801925b50505096850196935050600291909101906001016200151c565b5050620017af8287018862001319565b8581036040870152620017c3858262001831565b98975050505050505050565b901515815260200190565b60208082526003908201526205046560ec1b604082015260600190565b60208082526003908201526250465560e81b604082015260600190565b60208082526003908201526250464760e81b604082015260600190565b90815260200190565b60405181810167ffffffffffffffff811182821017156200185757fe5b604052919050565b600067ffffffffffffffff8211156200187457fe5b5060209081020190565b60009081526020902090565b680100000000000000008311156200189e57fe5b80548382558084101562001909576000828152602081206008600787010481016008600785010482019150600460078816028015620018ee57600019808301805482846020036008021c16815550505b505b818110156200190557828155600101620018f0565b5050505b508162001916826200187e565b6000805b8681101562001964576200193a62001932856200196d565b838562001a3f565b602084019350600482019150601c8211156200195b57600091506001830192505b6001016200191a565b50505050505050565b600081356200197c8162001a79565b92915050565b81356200198f8162001a63565b81546001600160a01b0319166001600160a01b0391909116178082556020830135620019bb8162001a90565b60038110620019c657fe5b60ff60a01b199190911660a09190911b60ff60a01b16178155604082013536839003601e19018112620019f857600080fd5b8201803567ffffffffffffffff81111562001a1257600080fd5b6020918201918102360382131562001a2957600080fd5b62001a398183600186016200188a565b50505050565b80546008830263ffffffff811b808660e01c831b1681198416178455505050505050565b6001600160a01b03811681146200076757600080fd5b6001600160e01b0319811681146200076757600080fd5b600381106200076757600080fdfe60806040526040516200433a3803806200433a833981016040819052620000269162000c38565b6200003c836200016f60201b620015221760201c565b604080516001808252818301909252600091816020015b6200005d62000bfc565b815260200190600190039081620000535750506040805160018082528183019092529192506000919060208083019080368337019050509050631f931c1c60e01b81600081518110620000ac57fe5b6001600160e01b031990921660209283029190910182015260408051606081019091526001600160a01b0386168152908101600081526020018281525082600081518110620000f757fe5b60200260200101819052506200012a826000604051806020016040528060008152506200022160201b620015c51760201c565b600062000141620003da60201b620006771760201c565b60050180546001600160a01b0319166001600160a01b0395909516949094179093555062000fc89350505050565b6001600160a01b038116620001a15760405162461bcd60e51b8152600401620001989062000f25565b60405180910390fd5b6000620001ad620003da565b6004810180546001600160a01b031981166001600160a01b03868116918217909355929350169081146200021c57826001600160a01b0316816001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35b505050565b825160005b818110156200038a5760008582815181106200023e57fe5b6020026020010151602001519050600060028111156200025a57fe5b8160028111156200026757fe5b1415620002b657620002b08683815181106200027f57fe5b6020026020010151600001518784815181106200029857fe5b602002602001015160400151620003fe60201b60201c565b62000380565b6001816002811115620002c557fe5b14156200030e57620002b0868381518110620002dd57fe5b602002602001015160000151878481518110620002f657fe5b6020026020010151604001516200052160201b60201c565b60028160028111156200031d57fe5b14156200036657620002b08683815181106200033557fe5b6020026020010151600001518784815181106200034e57fe5b6020026020010151604001516200064f60201b60201c565b60405162461bcd60e51b8152600401620001989062000f08565b5060010162000226565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673848484604051620003c09392919062000cda565b60405180910390a1620003d4838362000716565b50505050565b7fd5aa5c52d76b5d2be1bece4b96c91e533fe2611adb0c19cf868dadf921fc13b890565b80516200041f5760405162461bcd60e51b8152600401620001989062000f5f565b60006200042b620003da565b90506001600160a01b038316620004565760405162461bcd60e51b8152600401620001989062000e20565b6001600160a01b03831660009081526001820160205260409020546001600160601b0381166200048c576200048c82856200081a565b825160005b8181101562000519576000858281518110620004a957fe5b6020908102919091018101516001600160e01b031981166000908152918790526040909120549091506001600160a01b03168015620004fc5760405162461bcd60e51b8152600401620001989062000eb1565b6200050a8683878b62000862565b50506001928301920162000491565b505050505050565b8051620005425760405162461bcd60e51b8152600401620001989062000e94565b60006200054e620003da565b90506001600160a01b038316620005795760405162461bcd60e51b8152600401620001989062000ece565b6001600160a01b03831660009081526001820160205260409020546001600160601b038116620005af57620005af82856200081a565b825160005b8181101562000519576000858281518110620005cc57fe5b6020908102919091018101516001600160e01b031981166000908152918790526040909120549091506001600160a01b03908116908816811415620006255760405162461bcd60e51b8152600401620001989062000e5a565b6200063286828462000902565b620006408683878b62000862565b505060019283019201620005b4565b8051620006705760405162461bcd60e51b8152600401620001989062000f7c565b60006200067c620003da565b90506001600160a01b03831615620006a85760405162461bcd60e51b8152600401620001989062000f42565b815160005b818110156200070f576000848281518110620006c557fe5b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b03166200070485828462000902565b5050600101620006ad565b5050505050565b6001600160a01b0382166200074d57805115620007475760405162461bcd60e51b8152600401620001989062000de6565b62000816565b80516200076e5760405162461bcd60e51b8152600401620001989062000e3d565b600080836001600160a01b0316836040516200078b919062000cbc565b600060405180830381855af49150503d8060008114620007c8576040519150601f19603f3d011682016040523d82523d6000602084013e620007cd565b606091505b509150915081620003d457805115620007fc578060405162461bcd60e51b815260040162000198919062000dca565b60405162461bcd60e51b8152600401620001989062000e03565b5050565b6002820180546001600160a01b0390921660008181526001948501602090815260408220860185905594840183559182529290200180546001600160a01b0319169091179055565b6001600160e01b0319831660008181526020868152604080832080546001600160601b03909716600160a01b026001600160a01b0397881617815594909516808352600180890183529583208054968701815583528183206008870401805460e09890981c60046007909816979097026101000a96870263ffffffff9097021990971695909517909555529290915281546001600160a01b031916179055565b6001600160a01b0382166200092b5760405162461bcd60e51b8152600401620001989062000eeb565b6001600160a01b038216301415620009575760405162461bcd60e51b8152600401620001989062000e77565b6001600160e01b03198116600090815260208481526040808320546001600160a01b03861684526001870190925290912054600160a01b9091046001600160601b0316906000190180821462000a86576001600160a01b03841660009081526001860160205260408120805483908110620009ce57fe5b600091825260208083206008830401546001600160a01b038916845260018a019091526040909220805460079092166004026101000a90920460e01b92508291908590811062000a1a57fe5b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528690526040902080546001600160a01b0316600160a01b6001600160601b038516021790555b6001600160a01b0384166000908152600186016020526040902080548062000aaa57fe5b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319851682528690526040812055806200070f5760028501546001600160a01b03851660009081526001878101602052604090912001546000199091019080821462000ba557600087600201838154811062000b3a57fe5b6000918252602090912001546002890180546001600160a01b03909216925082918490811062000b6657fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055929091168152600189810190925260409020018190555b8660020180548062000bb357fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0388168252600189810190915260408220015550505050505050565b6040805160608082018352600080835260208301529181019190915290565b80516001600160a01b038116811462000c3357600080fd5b919050565b60008060006060848603121562000c4d578283fd5b62000c588462000c1b565b925062000c686020850162000c1b565b915062000c786040850162000c1b565b90509250925092565b6001600160a01b03169052565b6000815180845262000ca881602086016020860162000f99565b601f01601f19169290920160200192915050565b6000825162000cd081846020870162000f99565b9190910192915050565b606080825284518282018190526000919060809081850190602080820287018401818b01875b8481101562000d9757898303607f19018652815180516001600160a01b0316845284810151898501906003811062000d3457fe5b858701526040918201519185018a9052815190819052908501908a90898601905b8083101562000d815783516001600160e01b031916825292870192600192909201919087019062000d55565b5097860197945050509083019060010162000d00565b505062000da78289018b62000c81565b878103604089015262000dbb818a62000c8e565b9b9a5050505050505050505050565b60006020825262000ddf602083018462000c8e565b9392505050565b60208082526003908201526205349360ec1b604082015260600190565b60208082526003908201526229a4a960e91b604082015260600190565b60208082526003908201526205341360ec1b604082015260600190565b60208082526003908201526253494360e81b604082015260600190565b60208082526003908201526229a92960e91b604082015260600190565b60208082526003908201526253524960e81b604082015260600190565b60208082526003908201526229a92360e91b604082015260600190565b60208082526003908201526253464560e81b604082015260600190565b60208082526003908201526205352360ec1b604082015260600190565b60208082526003908201526253524560e81b604082015260600190565b60208082526003908201526229a4a360e91b604082015260600190565b602080825260039082015262534e4f60e81b604082015260600190565b60208082526003908201526205345360ec1b604082015260600190565b602080825260039082015262534e5360e81b604082015260600190565b60208082526003908201526253455360e81b604082015260600190565b60005b8381101562000fb657818101518382015260200162000f9c565b83811115620003d45750506000910152565b6133628062000fd86000396000f3fe6080604052600436106101395760003560e01c806373730d4c116100ab578063b82344d31161006f578063b82344d31461044a578063cd9c18411461046a578063dbe7b5921461047f578063e0adc11e1461049f578063ef393a8c146104bf578063f09a4016146104df57610140565b806373730d4c1461037357806373cc1154146103a0578063893d20e8146103ce57806399fbab88146103f0578063abf0f8a11461042a57610140565b806348413aa9116100fd57806348413aa9146102b1578063519f5099146102d157806355939dc9146102fe5780635e9396151461031e5780636a3e7dec1461033e5780636a4911fc1461035357610140565b8063150b7a02146101e957806333cfdd691461021f57806334927e6f146102415780633943f72c1461026f57806342b862701461029157610140565b3661014057005b610149336104ff565b8061015357503330145b6101785760405162461bcd60e51b815260040161016f90612f5e565b60405180910390fd5b6000610182610677565b600080356001600160e01b0319168152602082905260409020549091506001600160a01b0316806101c55760405162461bcd60e51b815260040161016f90612fd3565b3660008037600080366000845af43d6000803e8080156101e4573d6000f35b3d6000fd5b3480156101f557600080fd5b50610209610204366004612826565b61069b565b6040516102169190612dfb565b60405180910390f35b34801561022b57600080fd5b506102346106ab565b6040516102169190612df2565b34801561024d57600080fd5b5061026161025c366004612b5b565b6106b1565b604051610216929190612d9f565b34801561027b57600080fd5b5061028f61028a366004612b24565b610762565b005b34801561029d57600080fd5b5061028f6102ac3660046128dc565b6107b7565b3480156102bd57600080fd5b506102616102cc366004612b5b565b610907565b3480156102dd57600080fd5b506102f16102ec366004612ad0565b6109ac565b60405161021691906130f5565b34801561030a57600080fd5b50610261610319366004612b5b565b610aa9565b34801561032a57600080fd5b5061028f610339366004612a53565b610b4e565b34801561034a57600080fd5b50610234610c13565b34801561035f57600080fd5b5061023461036e366004612b00565b610c19565b34801561037f57600080fd5b5061039361038e366004612ad0565b610c36565b6040516102169190612de7565b3480156103ac57600080fd5b506103c06103bb366004612ad0565b610c47565b604051610216929190612e10565b3480156103da57600080fd5b506103e3610c9e565b6040516102169190612c80565b3480156103fc57600080fd5b5061041061040b366004612ad0565b610cbc565b6040516102169e9d9c9b9a999897969594939291906131b4565b34801561043657600080fd5b5061028f610445366004612b7c565b610d40565b34801561045657600080fd5b5061028f610465366004612be5565b610e0d565b34801561047657600080fd5b50610234610e8c565b34801561048b57600080fd5b5061023461049a366004612b00565b610e92565b3480156104ab57600080fd5b506102346104ba3660046129ea565b610eba565b3480156104cb57600080fd5b506102f16104da366004612ad0565b611100565b3480156104eb57600080fd5b5061028f6104fa3660046127ee565b61137c565b60008061050a610677565b905060008160050160009054906101000a90046001600160a01b03166001600160a01b0316633a8141cc6040518163ffffffff1660e01b815260040160006040518083038186803b15801561055e57600080fd5b505afa158015610572573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261059a9190810190612907565b805190915060005b8181101561066957600584015483516001600160a01b0380891692169063211b20a3908690859081106105d157fe5b60200260200101516040518263ffffffff1660e01b81526004016105f59190612df2565b604080518083038186803b15801561060c57600080fd5b505afa158015610620573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106449190612a02565b516001600160a01b03161415610661576001945050505050610672565b6001016105a2565b50600093505050505b919050565b7fd5aa5c52d76b5d2be1bece4b96c91e533fe2611adb0c19cf868dadf921fc13b890565b630a85bd0160e11b949350505050565b60025490565b60015460609060009083908590038111156106ce57506001548490035b8067ffffffffffffffff811180156106e557600080fd5b5060405190808252806020026020018201604052801561070f578160200160208202803683370190505b50925060005b818110156107565760018187018154811061072c57fe5b906000526020600020015484828151811061074357fe5b6020908102919091010152600101610715565b50840190509250929050565b61076b336104ff565b8061077557503330145b6107915760405162461bcd60e51b815260040161016f90612f5e565b60009283526006602090815260408085206001600160a01b039094168552929052912055565b60006107c1610677565b90508060050160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561081357600080fd5b505afa158015610827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084b91906127d2565b6001600160a01b0316336001600160a01b03161461087b5760405162461bcd60e51b815260040161016f9061309d565b6000610885610677565b60048101549091506001600160a01b031660006108a3868387611749565b90508085146108c45760405162461bcd60e51b815260040161016f90613046565b7fbfed55bdcd242e3dd0f60ddd7d1e87c67f61c34cd9527b3e6455d841b10253628683836040516108f793929190612c94565b60405180910390a1505050505050565b600254606090600090839085900381111561092457506002548490035b8067ffffffffffffffff8111801561093b57600080fd5b50604051908082528060200260200182016040528015610965578160200160208202803683370190505b50925060005b818110156107565760028187018154811061098257fe5b906000526020600020015484828151811061099957fe5b602090810291909101015260010161096b565b6109b461271c565b5060008181526005602081815260409283902083516101c081018552815480825260018301546001600160a01b0316938201939093526002808301546001600160801b0319608091821b1696830196909652600383015460608301526004830154958201959095529281015460a0840152600681015460c0840152600781015460e0840152600881015480850b850b850b61010085015263010000009004840b840b90930b6101208301526009830154610140830152600a830154610160830152600b830154610180830152600c909201546101a0820152906106725760405162461bcd60e51b815260040161016f90612fb6565b6004546060906000908390859003811115610ac657506004548490035b8067ffffffffffffffff81118015610add57600080fd5b50604051908082528060200260200182016040528015610b07578160200160208202803683370190505b50925060005b8181101561075657600481870181548110610b2457fe5b9060005260206000200154848281518110610b3b57fe5b6020908102919091010152600101610b0d565b610b57336104ff565b80610b6157503330145b610b7d5760405162461bcd60e51b815260040161016f90612f5e565b6020808201518251600090815260059283905260408082206004019290925581840151845182528282209093019290925560608301518351835281832060090155608083015183518352818320600a015560a083015183518352818320600b015560c083015183518352818320600c015582518252808220600601829055825182528120600701558051610c1090611787565b50565b60045490565b600660209081526000928352604080842090915290825290205481565b6000610c41826117ec565b92915050565b60008181526005602052604081205481908390610c765760405162461bcd60e51b815260040161016f90612e8e565b505050600090815260056020526040902060080154600281810b926301000000909204900b90565b600080610ca9610677565b600401546001600160a01b031691505090565b600560208190526000918252604090912080546001820154600280840154600385015460048601549686015460068701546007880154600889015460098a0154600a8b0154600b8c0154600c909c01549a9c6001600160a01b03909a169b60809890981b9a96999895979496939583810b956301000000909404900b93919290918e565b610d49336104ff565b80610d5357503330145b610d6f5760405162461bcd60e51b815260040161016f90612f5e565b87610d79816117ec565b610d955760405162461bcd60e51b815260040161016f90612ee6565b600089815260056020819052604090912089815560088101805462ffffff191660028b810b62ffffff9081169290921765ffffff00000019166301000000918c900b92909216021790556004810187905590810185905560068101849055600701829055610e0288611834565b505050505050505050565b610e16336104ff565b80610e2057503330145b610e3c5760405162461bcd60e51b815260040161016f90612f5e565b6000848152600560205260409020548490610e695760405162461bcd60e51b815260040161016f90612e8e565b506000938452600560205260409093206003810192909255600682015560070155565b60015490565b60009182526006602090815260408084206001600160a01b0393909316845291905290205490565b6000610ec5336104ff565b80610ecf57503330145b610eeb5760405162461bcd60e51b815260040161016f90612f5e565b610ef36119ab565b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601819055604080516101c08101825284358152919250602082810191610f4e919086019086016127b6565b6001600160a01b03168152602001610f6c60608501604086016129a8565b6001600160801b03191681526020018360600135815260200160008152602001600081526020018360c0013581526020018360e001358152602001836080016020810190610fba91906129d0565b60020b8152602001610fd260c0850160a086016129d0565b600290810b82526000602080840182905260408085018390526060808601849052608095860184905287845260058084529382902087518155928701516001840180546001600160a01b039092166001600160a01b031990921691909117905590860151828501805491871c6001600160801b0319909216919091179055850151600382015592840151600484015560a08401519083015560c0830151600683015560e08301516007830155610100830151600883018054610120860151840b62ffffff90811663010000000265ffffff000000199490950b1662ffffff1990911617919091169190911790556101408201516009820155610160820151600a820155610180820151600b8201556101a090910151600c909101556110f78235611834565b610672816119b9565b61110861271c565b60005b6001548110156112355760006001828154811061112457fe5b90600052602060002001549050836005600083815260200190815260200160002060000154141561122c5760009081526005602081815260409283902083516101c0810185528154815260018201546001600160a01b0316928101929092526002808201546001600160801b0319608091821b1695840195909552600382015460608401526004820154948301949094529182015460a0820152600682015460c0820152600782015460e0820152600882015480840b840b840b61010083015263010000009004830b830b90920b6101208301526009810154610140830152600a810154610160830152600b810154610180830152600c01546101a082015291506106729050565b5060010161110b565b5060005b6002548110156113635760006002828154811061125257fe5b90600052602060002001549050836005600083815260200190815260200160002060000154141561135a5760009081526005602081815260409283902083516101c0810185528154815260018201546001600160a01b0316928101929092526002808201546001600160801b0319608091821b1695840195909552600382015460608401526004820154948301949094529182015460a0820152600682015460c0820152600782015460e0820152600882015480840b840b840b61010083015263010000009004830b830b90920b6101208301526009810154610140830152600a810154610160830152600b810154610180830152600c01546101a082015291506106729050565b50600101611239565b5060405162461bcd60e51b815260040161016f90612fb6565b6000611386610677565b9050336001600160a01b03168160050160009054906101000a90046001600160a01b03166001600160a01b0316632d2c5b586040518163ffffffff1660e01b815260040160206040518083038186803b1580156113e257600080fd5b505afa1580156113f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141a91906127d2565b6001600160a01b0316146114405760405162461bcd60e51b815260040161016f90612f40565b600054610100900460ff16806114595750611459611b35565b80611467575060005460ff16155b6114a25760405162461bcd60e51b815260040180806020018281038252602e8152602001806132d5602e913960400191505060405180910390fd5b600054610100900460ff161580156114cd576000805460ff1961ff0019909116610100171660011790555b60006114d7610677565b6004810180546001600160a01b038089166001600160a01b031992831617909255600390920180549187169190921617905550801561151c576000805461ff00191690555b50505050565b6001600160a01b0381166115485760405162461bcd60e51b815260040161016f90613063565b6000611552610677565b6004810180546001600160a01b031981166001600160a01b03868116918217909355929350169081146115c057826001600160a01b0316816001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35b505050565b825160005b818110156117035760008582815181106115e057fe5b6020026020010151602001519050600060028111156115fb57fe5b81600281111561160757fe5b141561164a5761164586838151811061161c57fe5b60200260200101516000015187848151811061163457fe5b602002602001015160400151611b46565b6116fa565b600181600281111561165857fe5b14156116965761164586838151811061166d57fe5b60200260200101516000015187848151811061168557fe5b602002602001015160400151611c56565b60028160028111156116a457fe5b14156116e2576116458683815181106116b957fe5b6020026020010151600001518784815181106116d157fe5b602002602001015160400151611d6f565b60405162461bcd60e51b815260040161016f90613029565b506001016115ca565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67384848460405161173793929190612cb8565b60405180910390a161151c8383611e22565b6000806117568530611f14565b90508083106117675780915061176b565b8291505b61177f6001600160a01b0386168584611f9a565b509392505050565b80611791816117ec565b6117ad5760405162461bcd60e51b815260040161016f90612ee6565b6117b682611fec565b50600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0155565b6000805b60015481101561182b57826001828154811061180857fe5b90600052602060002001541415611823576001915050610672565b6001016117f0565b50600092915050565b80600061183f610677565b9050306001600160a01b03168160030160009054906101000a90046001600160a01b03166001600160a01b0316635bfccac96040518163ffffffff1660e01b815260040160206040518083038186803b15801561189b57600080fd5b505afa1580156118af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d391906127d2565b6001600160a01b0316636352211e846040518263ffffffff1660e01b81526004016118fe9190612df2565b60206040518083038186803b15801561191657600080fd5b505afa15801561192a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194e91906127d2565b6001600160a01b0316146119745760405162461bcd60e51b815260040161016f90612f04565b5050600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0155565b600380546001019081905590565b60006119c3610677565b905060008160050160009054906101000a90046001600160a01b03166001600160a01b0316633a8141cc6040518163ffffffff1660e01b815260040160006040518083038186803b158015611a1757600080fd5b505afa158015611a2b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a539190810190612907565b805190915060005b81811015611b2e57600584015483516000916001600160a01b03169063211b20a390869085908110611a8957fe5b60200260200101516040518263ffffffff1660e01b8152600401611aad9190612df2565b604080518083038186803b158015611ac457600080fd5b505afa158015611ad8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afc9190612a02565b602080820151600089815260068352604080822094516001600160a01b03168252939092529190205550600101611a5b565b5050505050565b6000611b403061207c565b15905090565b8051611b645760405162461bcd60e51b815260040161016f906130bb565b6000611b6e610677565b90506001600160a01b038316611b965760405162461bcd60e51b815260040161016f90612e71565b6001600160a01b03831660009081526001820160205260409020546001600160601b038116611bc957611bc98285612082565b825160005b81811015611c4e576000858281518110611be457fe5b6020908102919091018101516001600160e01b031981166000908152918790526040909120549091506001600160a01b03168015611c345760405162461bcd60e51b815260040161016f90612f99565b611c408683878b6120ca565b505060019283019201611bce565b505050505050565b8051611c745760405162461bcd60e51b815260040161016f90612f7c565b6000611c7e610677565b90506001600160a01b038316611ca65760405162461bcd60e51b815260040161016f90612fef565b6001600160a01b03831660009081526001820160205260409020546001600160601b038116611cd957611cd98285612082565b825160005b81811015611c4e576000858281518110611cf457fe5b6020908102919091018101516001600160e01b031981166000908152918790526040909120549091506001600160a01b03908116908816811415611d4a5760405162461bcd60e51b815260040161016f90612ec9565b611d5586828461216a565b611d618683878b6120ca565b505060019283019201611cde565b8051611d8d5760405162461bcd60e51b815260040161016f906130d8565b6000611d97610677565b90506001600160a01b03831615611dc05760405162461bcd60e51b815260040161016f90613080565b815160005b81811015611b2e576000848281518110611ddb57fe5b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b0316611e1885828461216a565b5050600101611dc5565b6001600160a01b038216611e5457805115611e4f5760405162461bcd60e51b815260040161016f90612e37565b611f10565b8051611e725760405162461bcd60e51b815260040161016f90612eac565b600080836001600160a01b031683604051611e8d9190612c64565b600060405180830381855af49150503d8060008114611ec8576040519150601f19603f3d011682016040523d82523d6000602084013e611ecd565b606091505b50915091508161151c57805115611ef8578060405162461bcd60e51b815260040161016f9190612e24565b60405162461bcd60e51b815260040161016f90612e54565b5050565b6040516370a0823160e01b81526000906001600160a01b038416906370a0823190611f43908590600401612c80565b60206040518083038186803b158015611f5b57600080fd5b505afa158015611f6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f939190612ae8565b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526115c0908490612455565b60005b600154811015611f1057816001828154811061200757fe5b906000526020600020015414156120745760018054600019810190811061202a57fe5b90600052602060002001546001828154811061204257fe5b600091825260209091200155600180548061205957fe5b60019003818190600052602060002001600090559055611f10565b600101611fef565b3b151590565b6002820180546001600160a01b0390921660008181526001948501602090815260408220860185905594840183559182529290200180546001600160a01b0319169091179055565b6001600160e01b0319831660008181526020868152604080832080546001600160601b03909716600160a01b026001600160a01b0397881617815594909516808352600180890183529583208054968701815583528183206008870401805460e09890981c60046007909816979097026101000a96870263ffffffff9097021990971695909517909555529290915281546001600160a01b031916179055565b6001600160a01b0382166121905760405162461bcd60e51b815260040161016f9061300c565b6001600160a01b0382163014156121b95760405162461bcd60e51b815260040161016f90612f23565b6001600160e01b03198116600090815260208481526040808320546001600160a01b03861684526001870190925290912054600160a01b9091046001600160601b031690600019018082146122e5576001600160a01b0384166000908152600186016020526040812080548390811061222e57fe5b600091825260208083206008830401546001600160a01b038916845260018a019091526040909220805460079092166004026101000a90920460e01b92508291908590811061227957fe5b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528690526040902080546001600160a01b0316600160a01b6001600160601b038516021790555b6001600160a01b0384166000908152600186016020526040902080548061230857fe5b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b031985168252869052604081205580611b2e5760028501546001600160a01b0385166000908152600187810160205260409091200154600019909101908082146123ff57600087600201838154811061239557fe5b6000918252602090912001546002890180546001600160a01b0390921692508291849081106123c057fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055929091168152600189810190925260409020018190555b8660020180548061240c57fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0388168252600189810190915260408220015550505050505050565b60006124aa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125069092919063ffffffff16565b8051909150156115c0578080602001905160208110156124c957600080fd5b50516115c05760405162461bcd60e51b815260040180806020018281038252602a815260200180613303602a913960400191505060405180910390fd5b6060612515848460008561251d565b949350505050565b60608247101561255e5760405162461bcd60e51b81526004018080602001828103825260268152602001806132af6026913960400191505060405180910390fd5b6125678561207c565b6125b8576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106125f65780518252601f1990920191602091820191016125d7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612658576040519150601f19603f3d011682016040523d82523d6000602084013e61265d565b606091505b509150915061266d828286612678565b979650505050505050565b60608315612687575081611f93565b8251156126975782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156126e15781810151838201526020016126c9565b50505050905090810190601f16801561270e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b604051806101c001604052806000815260200160006001600160a01b0316815260200160006001600160801b03191681526020016000815260200160008152602001600081526020016000815260200160008152602001600060020b8152602001600060020b8152602001600081526020016000815260200160008152602001600081525090565b8035600281900b811461067257600080fd5b6000602082840312156127c7578081fd5b8135611f9381613299565b6000602082840312156127e3578081fd5b8151611f9381613299565b60008060408385031215612800578081fd5b823561280b81613299565b9150602083013561281b81613299565b809150509250929050565b6000806000806080858703121561283b578182fd5b843561284681613299565b935060208581013561285781613299565b935060408601359250606086013567ffffffffffffffff8082111561287a578384fd5b818801915088601f83011261288d578384fd5b81358181111561289957fe5b6128ab601f8201601f19168501613249565b915080825289848285010111156128c0578485fd5b8084840185840137810190920192909252939692955090935050565b600080604083850312156128ee578182fd5b82356128f981613299565b946020939093013593505050565b60006020808385031215612919578182fd5b825167ffffffffffffffff80821115612930578384fd5b818501915085601f830112612943578384fd5b81518181111561294f57fe5b838102915061295f848301613249565b8181528481019084860184860187018a1015612979578788fd5b8795505b8386101561299b57805183526001959095019491860191860161297d565b5098975050505050505050565b6000602082840312156129b9578081fd5b81356001600160801b031981168114611f93578182fd5b6000602082840312156129e1578081fd5b611f93826127a4565b600061010082840312156129fc578081fd5b50919050565b600060408284031215612a13578081fd5b6040516040810181811067ffffffffffffffff82111715612a3057fe5b6040528251612a3e81613299565b81526020928301519281019290925250919050565b600060e08284031215612a64578081fd5b60405160e0810181811067ffffffffffffffff82111715612a8157fe5b8060405250823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201528091505092915050565b600060208284031215612ae1578081fd5b5035919050565b600060208284031215612af9578081fd5b5051919050565b60008060408385031215612b12578182fd5b82359150602083013561281b81613299565b600080600060608486031215612b38578081fd5b833592506020840135612b4a81613299565b929592945050506040919091013590565b60008060408385031215612b6d578182fd5b50508035926020909101359150565b600080600080600080600080610100898b031215612b98578586fd5b8835975060208901359650612baf60408a016127a4565b9550612bbd60608a016127a4565b979a969950949760808101359660a0820135965060c0820135955060e0909101359350915050565b60008060008060808587031215612bfa578182fd5b5050823594602084013594506040840135936060013592509050565b6001600160a01b03169052565b6001600160801b0319169052565b60008151808452612c4981602086016020860161326d565b601f01601f19169290920160200192915050565b60020b9052565b60008251612c7681846020870161326d565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b606080825284518282018190526000919060809081850190602080820287018401818b01875b84811015612d7057898303607f19018652815180516001600160a01b03168452848101518985019060038110612d1057fe5b858701526040918201519185018a9052815190819052908501908a90898601905b80831015612d5b5783516001600160e01b0319168252928701926001929092019190870190612d31565b50978601979450505090830190600101612cde565b5050612d7e8289018b612c16565b8781036040890152612d90818a612c31565b9b9a5050505050505050505050565b604080825283519082018190526000906020906060840190828701845b82811015612dd857815184529284019290840190600101612dbc565b50505092019290925292915050565b901515815260200190565b90815260200190565b6001600160e01b031991909116815260200190565b600292830b8152910b602082015260400190565b600060208252611f936020830184612c31565b60208082526003908201526205349360ec1b604082015260600190565b60208082526003908201526229a4a960e91b604082015260600190565b60208082526003908201526205341360ec1b604082015260600190565b602080825260049082015263504d504560e01b604082015260600190565b60208082526003908201526253494360e81b604082015260600190565b60208082526003908201526229a92960e91b604082015260600190565b6020808252600490820152632826a82960e11b604082015260600190565b6020808252600590820152640504d4f4f560dc1b604082015260600190565b60208082526003908201526253524960e81b604082015260600190565b6020808252600490820152632826a7a360e11b604082015260600190565b602080825260049082015263504d4f5760e01b604082015260600190565b60208082526003908201526229a92360e91b604082015260600190565b60208082526003908201526253464560e81b604082015260600190565b602080825260039082015262504d5360e81b604082015260600190565b602080825260029082015261504d60f01b604082015260600190565b60208082526003908201526205352360ec1b604082015260600190565b60208082526003908201526253524560e81b604082015260600190565b60208082526003908201526229a4a360e91b604082015260600190565b602080825260039082015262504d4560e81b604082015260600190565b602080825260039082015262534e4f60e81b604082015260600190565b60208082526003908201526205345360ec1b604082015260600190565b602080825260049082015263504d4f4760e01b604082015260600190565b602080825260039082015262534e5360e81b604082015260600190565b60208082526003908201526253455360e81b604082015260600190565b815181526020808301516101c083019161311190840182612c16565b5060408301516131246040840182612c23565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e08301526101008084015161316a82850182612c5d565b50506101208084015161317f82850182612c5d565b50506101408381015190830152610160808401519083015261018080840151908301526101a092830151929091019190915290565b8e81526001600160a01b038e1660208201526001600160801b03198d166040820152606081018c9052608081018b905260a081018a905260c0810189905260e081018890526101c0810161320c610100830189612c5d565b61321a610120830188612c5d565b856101408301528461016083015283610180830152826101a08301529f9e505050505050505050505050505050565b60405181810167ffffffffffffffff8111828210171561326557fe5b604052919050565b60005b83811015613288578181015183820152602001613270565b8381111561151c5750506000910152565b6001600160a01b0381168114610c1057600080fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220b9103edbf981bdaf50e2fdf802c933497c5e97ba3b357807563049133fadf67964736f6c63430007060033a26469706673582212207865b7c10e7deb8f4e04018f8ab6b774f8107c4bb6a6dc7996f6012fc05bc9d164736f6c63430007060033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001005760003560e01c806383240f831162000099578063c0f06ca4116200006f578063c0f06ca414620001e5578063c81e0f9114620001ef578063cd1719151462000206578063efc81a8c146200022d5762000100565b806383240f8314620001aa5780638456cb5914620001d1578063a051e9b314620001db5762000100565b80635c975abb11620000db5780635c975abb14620001595780636cbaebe51462000172578063766cadc414620001895780637b10399914620001a05762000100565b806320e467f614620001055780633f4ba83a14620001345780634d78530d1462000140575b600080fd5b6200011c62000116366004620012de565b62000237565b6040516200012b919062001343565b60405180910390f35b6200013e62000262565b005b6200014a6200033f565b6040516200012b919062001831565b6200016362000345565b6040516200012b9190620017cf565b6200013e62000183366004620012a3565b6200034e565b6200013e6200019a366004620010ea565b6200076a565b6200011c6200089b565b620001c1620001bb366004620012de565b620008bf565b6040516200012b92919062001394565b6200013e620008fa565b6200011c620009cc565b6200011c620009f0565b6200011c62000200366004620010a5565b62000a14565b6200021d62000217366004620012f7565b62000a2f565b6040516200012b929190620013b3565b6200011c62000b07565b600181815481106200024857600080fd5b6000918252602090912001546001600160a01b0316905081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015620002bc57600080fd5b505afa158015620002d1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002f79190620010cb565b6001600160a01b0316336001600160a01b031614620003335760405162461bcd60e51b81526004016200032a9062001814565b60405180910390fd5b6200033d62000da9565b565b60015490565b60005460ff1690565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015620003a857600080fd5b505afa158015620003bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003e39190620010cb565b6001600160a01b0316336001600160a01b031614620004165760405162461bcd60e51b81526004016200032a9062001814565b60026200042a604083016020840162001284565b60028111156200043657fe5b1415620005a75760025460005b818110156200058c576200045b6020840184620010a5565b6001600160a01b0316600282815481106200047257fe5b60009182526020909120600290910201546001600160a01b03161415620005835760026001830381548110620004a457fe5b906000526020600020906002020160028281548110620004c057fe5b600091825260209091208254600292830290910180546001600160a01b0319166001600160a01b03909216919091178082558354919260ff600160a01b938490041692849260ff60a01b19169184908111156200051957fe5b02179055506001828101805462000534928401919062000ff6565b5090505060028054806200054457fe5b60008281526020812060026000199093019283020180546001600160a81b03191681559062000577600183018262001059565b50509055505062000767565b60010162000443565b5060405162461bcd60e51b81526004016200032a90620017f7565b6001620005bb604083016020840162001284565b6002811115620005c757fe5b1415620006635760025460005b818110156200058c57620005ec6020840184620010a5565b6001600160a01b0316600282815481106200060357fe5b60009182526020909120600290910201546001600160a01b031614156200065a5782600282815481106200063357fe5b906000526020600020906002020181816200064f919062001982565b905050505062000767565b600101620005d4565b600062000677604083016020840162001284565b60028111156200068357fe5b14156200074d5760025460005b818110156200070357620006a86020840184620010a5565b6001600160a01b031660028281548110620006bf57fe5b60009182526020909120600290910201546001600160a01b03161415620006fa5760405162461bcd60e51b81526004016200032a90620017f7565b60010162000690565b506002805460018101825560008290528391027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0162000744828262001982565b50505062000767565b60405162461bcd60e51b81526004016200032a90620017f7565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015620007c457600080fd5b505afa158015620007d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007ff9190620010cb565b6001600160a01b0316336001600160a01b031614620008325760405162461bcd60e51b81526004016200032a9062001814565b6040516307e4c70760e21b81526001600160a01b03831690631f931c1c906200086390849060009060040162001406565b600060405180830381600087803b1580156200087e57600080fd5b505af115801562000893573d6000803e3d6000fd5b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60028181548110620008d057600080fd5b60009182526020909120600290910201546001600160a01b0381169150600160a01b900460ff1682565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156200095457600080fd5b505afa15801562000969573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200098f9190620010cb565b6001600160a01b0316336001600160a01b031614620009c25760405162461bcd60e51b81526004016200032a9062001814565b6200033d62000e4e565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6003602052600090815260409020546001600160a01b031681565b600154606090600090839085900381111562000a4d57506001548490035b8067ffffffffffffffff8111801562000a6557600080fd5b5060405190808252806020026020018201604052801562000a90578160200160208202803683370190505b50925060005b8181101562000afb5760018187018154811062000aaf57fe5b9060005260206000200160009054906101000a90046001600160a01b031684828151811062000ada57fe5b6001600160a01b039092166020928302919091019091015260010162000a96565b50840190509250929050565b600062000b1362000345565b1562000b59576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b336000908152600360205260409020546001600160a01b03161562000b925760405162461bcd60e51b81526004016200032a90620017da565b6000337f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060405162000be59062001080565b62000bf39392919062001371565b604051809103906000f08015801562000c10573d6000803e3d6000fd5b50600180548082019091557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0383166001600160a01b03199182168117909255336000818152600360205260409081902080549093168417909255905163784d200b60e11b8152929350909163f09a40169162000cbc917f00000000000000000000000000000000000000000000000000000000000000009060040162001357565b600060405180830381600087803b15801562000cd757600080fd5b505af115801562000cec573d6000803e3d6000fd5b50506040516307e4c70760e21b81526001600160a01b0384169250631f931c1c915062000d2290600290600090600401620014f5565b600060405180830381600087803b15801562000d3d57600080fd5b505af115801562000d52573d6000803e3d6000fd5b5050505062000d613362000ed6565b806001600160a01b03167fcd08baef8491fbefc9205236874e188ae474400c7fbf8022f3b86d97ec5bc40f3360405162000d9c919062001343565b60405180910390a2905090565b62000db362000345565b62000dfc576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa62000e3162000ff2565b604080516001600160a01b039092168252519081900360200190a1565b62000e5862000345565b1562000e9e576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25862000e3162000ff2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f80ffbd56040518163ffffffff1660e01b815260040160206040518083038186803b15801562000f3057600080fd5b505afa15801562000f45573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f6b9190620010cb565b6001600160a01b0316639ed93318826040518263ffffffff1660e01b815260040162000f98919062001343565b602060405180830381600087803b15801562000fb357600080fd5b505af115801562000fc8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fee9190620010cb565b5050565b3390565b8280548282559060005260206000209060070160089004810192821562001047576000526020600020916007016008900482015b82811115620010475782548255916001019190600101906200102a565b50620010559291506200108e565b5090565b5080546000825560070160089004906000526020600020908101906200076791906200108e565b61433a8062001a9f83390190565b5b808211156200105557600081556001016200108f565b600060208284031215620010b7578081fd5b8135620010c48162001a63565b9392505050565b600060208284031215620010dd578081fd5b8151620010c48162001a63565b60008060408385031215620010fd578081fd5b62001109833562001a63565b82359150602083013567ffffffffffffffff8082111562001128578283fd5b818501915085601f8301126200113c578283fd5b620011526200114c83356200185f565b6200183a565b82358152602080820191908401855b85358110156200127557813586016060818c03601f1901121562001183578788fd5b6040516060810181811088821117156200119957fe5b6040526020820135620011ac8162001a63565b8152620011bd604083013562001a90565b60408201356020820152606082013587811115620011d957898afd5b8083019250508b603f830112620011ee578889fd5b6020820135620012026200114c826200185f565b80828252602082019150604085018f604060208602880101111562001225578c8dfd5b8c95505b8386101562001256576200123e813562001a79565b80358352600195909501946020928301920162001229565b5060408401525050855250602093840193919091019060010162001161565b50959890975095505050505050565b60006020828403121562001296578081fd5b8135620010c48162001a90565b600060208284031215620012b5578081fd5b813567ffffffffffffffff811115620012cc578182fd5b820160608185031215620010c4578182fd5b600060208284031215620012f0578081fd5b5035919050565b600080604083850312156200130a578182fd5b50508035926020909101359150565b6001600160a01b03169052565b6001600160e01b0319169052565b600381106200133f57fe5b9052565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b038316815260408101620010c4602083018462001334565b604080825283519082018190526000906020906060840190828701845b82811015620013f75781516001600160a01b031684529284019290840190600101620013d0565b50505092019290925292915050565b606080825283518282018190526000919060809081850190602080820287018401818a01875b84811015620014c357898303607f19018652815180516001600160a01b031684528481015189850190620014638787018262001334565b506040918201519185018a9052815190819052908501908a90898601905b80831015620014ad5783516001600160e01b031916825292870192600192909201919087019062001481565b509786019794505050908301906001016200142c565b5050620014d38289018a62001319565b8781036040890152620014e7878262001831565b9a9950505050505050505050565b60006060825260608201845480825260808401915060206080818302860101878552818520855b848110156200179f57878303607f1901865281546001600160a01b03811684526200155185850160a083901c60ff1662001334565b5060016060604085015260608401818401546200156f818362001831565b91506200157e8386016200187e565b8a5b82600782011015620016455781546200159d858260e01b62001326565b6001600160e01b0319620015ba868c0160c084901b831662001326565b620015ce60408701828460a01b1662001326565b620015e260608701828460801b1662001326565b620015f660808701828460601b1662001326565b6200160a60a08701828460401b1662001326565b6200161d60c0870182848e1b1662001326565b6200162e60e0870182841662001326565b505061010093909301929084019060080162001580565b90549082811015620016675762001660848360e01b62001326565b9288019284015b8281101562001691576200168a8460c084901b6001600160e01b03191662001326565b9288019284015b82811015620016bb57620016b48460a084901b6001600160e01b03191662001326565b9288019284015b82811015620016e557620016de84608084901b6001600160e01b03191662001326565b9288019284015b828110156200170f576200170884606084901b6001600160e01b03191662001326565b9288019284015b8281101562001739576200173284604084901b6001600160e01b03191662001326565b9288019284015b8281101562001761576200175a84838b1b6001600160e01b03191662001326565b9288019284015b82811015620017855762001780846001600160e01b0319841662001326565b928801925b50505096850196935050600291909101906001016200151c565b5050620017af8287018862001319565b8581036040870152620017c3858262001831565b98975050505050505050565b901515815260200190565b60208082526003908201526205046560ec1b604082015260600190565b60208082526003908201526250465560e81b604082015260600190565b60208082526003908201526250464760e81b604082015260600190565b90815260200190565b60405181810167ffffffffffffffff811182821017156200185757fe5b604052919050565b600067ffffffffffffffff8211156200187457fe5b5060209081020190565b60009081526020902090565b680100000000000000008311156200189e57fe5b80548382558084101562001909576000828152602081206008600787010481016008600785010482019150600460078816028015620018ee57600019808301805482846020036008021c16815550505b505b818110156200190557828155600101620018f0565b5050505b508162001916826200187e565b6000805b8681101562001964576200193a62001932856200196d565b838562001a3f565b602084019350600482019150601c8211156200195b57600091506001830192505b6001016200191a565b50505050505050565b600081356200197c8162001a79565b92915050565b81356200198f8162001a63565b81546001600160a01b0319166001600160a01b0391909116178082556020830135620019bb8162001a90565b60038110620019c657fe5b60ff60a01b199190911660a09190911b60ff60a01b16178155604082013536839003601e19018112620019f857600080fd5b8201803567ffffffffffffffff81111562001a1257600080fd5b6020918201918102360382131562001a2957600080fd5b62001a398183600186016200188a565b50505050565b80546008830263ffffffff811b808660e01c831b1681198416178455505050505050565b6001600160a01b03811681146200076757600080fd5b6001600160e01b0319811681146200076757600080fd5b600381106200076757600080fdfe60806040526040516200433a3803806200433a833981016040819052620000269162000c38565b6200003c836200016f60201b620015221760201c565b604080516001808252818301909252600091816020015b6200005d62000bfc565b815260200190600190039081620000535750506040805160018082528183019092529192506000919060208083019080368337019050509050631f931c1c60e01b81600081518110620000ac57fe5b6001600160e01b031990921660209283029190910182015260408051606081019091526001600160a01b0386168152908101600081526020018281525082600081518110620000f757fe5b60200260200101819052506200012a826000604051806020016040528060008152506200022160201b620015c51760201c565b600062000141620003da60201b620006771760201c565b60050180546001600160a01b0319166001600160a01b0395909516949094179093555062000fc89350505050565b6001600160a01b038116620001a15760405162461bcd60e51b8152600401620001989062000f25565b60405180910390fd5b6000620001ad620003da565b6004810180546001600160a01b031981166001600160a01b03868116918217909355929350169081146200021c57826001600160a01b0316816001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35b505050565b825160005b818110156200038a5760008582815181106200023e57fe5b6020026020010151602001519050600060028111156200025a57fe5b8160028111156200026757fe5b1415620002b657620002b08683815181106200027f57fe5b6020026020010151600001518784815181106200029857fe5b602002602001015160400151620003fe60201b60201c565b62000380565b6001816002811115620002c557fe5b14156200030e57620002b0868381518110620002dd57fe5b602002602001015160000151878481518110620002f657fe5b6020026020010151604001516200052160201b60201c565b60028160028111156200031d57fe5b14156200036657620002b08683815181106200033557fe5b6020026020010151600001518784815181106200034e57fe5b6020026020010151604001516200064f60201b60201c565b60405162461bcd60e51b8152600401620001989062000f08565b5060010162000226565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673848484604051620003c09392919062000cda565b60405180910390a1620003d4838362000716565b50505050565b7fd5aa5c52d76b5d2be1bece4b96c91e533fe2611adb0c19cf868dadf921fc13b890565b80516200041f5760405162461bcd60e51b8152600401620001989062000f5f565b60006200042b620003da565b90506001600160a01b038316620004565760405162461bcd60e51b8152600401620001989062000e20565b6001600160a01b03831660009081526001820160205260409020546001600160601b0381166200048c576200048c82856200081a565b825160005b8181101562000519576000858281518110620004a957fe5b6020908102919091018101516001600160e01b031981166000908152918790526040909120549091506001600160a01b03168015620004fc5760405162461bcd60e51b8152600401620001989062000eb1565b6200050a8683878b62000862565b50506001928301920162000491565b505050505050565b8051620005425760405162461bcd60e51b8152600401620001989062000e94565b60006200054e620003da565b90506001600160a01b038316620005795760405162461bcd60e51b8152600401620001989062000ece565b6001600160a01b03831660009081526001820160205260409020546001600160601b038116620005af57620005af82856200081a565b825160005b8181101562000519576000858281518110620005cc57fe5b6020908102919091018101516001600160e01b031981166000908152918790526040909120549091506001600160a01b03908116908816811415620006255760405162461bcd60e51b8152600401620001989062000e5a565b6200063286828462000902565b620006408683878b62000862565b505060019283019201620005b4565b8051620006705760405162461bcd60e51b8152600401620001989062000f7c565b60006200067c620003da565b90506001600160a01b03831615620006a85760405162461bcd60e51b8152600401620001989062000f42565b815160005b818110156200070f576000848281518110620006c557fe5b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b03166200070485828462000902565b5050600101620006ad565b5050505050565b6001600160a01b0382166200074d57805115620007475760405162461bcd60e51b8152600401620001989062000de6565b62000816565b80516200076e5760405162461bcd60e51b8152600401620001989062000e3d565b600080836001600160a01b0316836040516200078b919062000cbc565b600060405180830381855af49150503d8060008114620007c8576040519150601f19603f3d011682016040523d82523d6000602084013e620007cd565b606091505b509150915081620003d457805115620007fc578060405162461bcd60e51b815260040162000198919062000dca565b60405162461bcd60e51b8152600401620001989062000e03565b5050565b6002820180546001600160a01b0390921660008181526001948501602090815260408220860185905594840183559182529290200180546001600160a01b0319169091179055565b6001600160e01b0319831660008181526020868152604080832080546001600160601b03909716600160a01b026001600160a01b0397881617815594909516808352600180890183529583208054968701815583528183206008870401805460e09890981c60046007909816979097026101000a96870263ffffffff9097021990971695909517909555529290915281546001600160a01b031916179055565b6001600160a01b0382166200092b5760405162461bcd60e51b8152600401620001989062000eeb565b6001600160a01b038216301415620009575760405162461bcd60e51b8152600401620001989062000e77565b6001600160e01b03198116600090815260208481526040808320546001600160a01b03861684526001870190925290912054600160a01b9091046001600160601b0316906000190180821462000a86576001600160a01b03841660009081526001860160205260408120805483908110620009ce57fe5b600091825260208083206008830401546001600160a01b038916845260018a019091526040909220805460079092166004026101000a90920460e01b92508291908590811062000a1a57fe5b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528690526040902080546001600160a01b0316600160a01b6001600160601b038516021790555b6001600160a01b0384166000908152600186016020526040902080548062000aaa57fe5b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319851682528690526040812055806200070f5760028501546001600160a01b03851660009081526001878101602052604090912001546000199091019080821462000ba557600087600201838154811062000b3a57fe5b6000918252602090912001546002890180546001600160a01b03909216925082918490811062000b6657fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055929091168152600189810190925260409020018190555b8660020180548062000bb357fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0388168252600189810190915260408220015550505050505050565b6040805160608082018352600080835260208301529181019190915290565b80516001600160a01b038116811462000c3357600080fd5b919050565b60008060006060848603121562000c4d578283fd5b62000c588462000c1b565b925062000c686020850162000c1b565b915062000c786040850162000c1b565b90509250925092565b6001600160a01b03169052565b6000815180845262000ca881602086016020860162000f99565b601f01601f19169290920160200192915050565b6000825162000cd081846020870162000f99565b9190910192915050565b606080825284518282018190526000919060809081850190602080820287018401818b01875b8481101562000d9757898303607f19018652815180516001600160a01b0316845284810151898501906003811062000d3457fe5b858701526040918201519185018a9052815190819052908501908a90898601905b8083101562000d815783516001600160e01b031916825292870192600192909201919087019062000d55565b5097860197945050509083019060010162000d00565b505062000da78289018b62000c81565b878103604089015262000dbb818a62000c8e565b9b9a5050505050505050505050565b60006020825262000ddf602083018462000c8e565b9392505050565b60208082526003908201526205349360ec1b604082015260600190565b60208082526003908201526229a4a960e91b604082015260600190565b60208082526003908201526205341360ec1b604082015260600190565b60208082526003908201526253494360e81b604082015260600190565b60208082526003908201526229a92960e91b604082015260600190565b60208082526003908201526253524960e81b604082015260600190565b60208082526003908201526229a92360e91b604082015260600190565b60208082526003908201526253464560e81b604082015260600190565b60208082526003908201526205352360ec1b604082015260600190565b60208082526003908201526253524560e81b604082015260600190565b60208082526003908201526229a4a360e91b604082015260600190565b602080825260039082015262534e4f60e81b604082015260600190565b60208082526003908201526205345360ec1b604082015260600190565b602080825260039082015262534e5360e81b604082015260600190565b60208082526003908201526253455360e81b604082015260600190565b60005b8381101562000fb657818101518382015260200162000f9c565b83811115620003d45750506000910152565b6133628062000fd86000396000f3fe6080604052600436106101395760003560e01c806373730d4c116100ab578063b82344d31161006f578063b82344d31461044a578063cd9c18411461046a578063dbe7b5921461047f578063e0adc11e1461049f578063ef393a8c146104bf578063f09a4016146104df57610140565b806373730d4c1461037357806373cc1154146103a0578063893d20e8146103ce57806399fbab88146103f0578063abf0f8a11461042a57610140565b806348413aa9116100fd57806348413aa9146102b1578063519f5099146102d157806355939dc9146102fe5780635e9396151461031e5780636a3e7dec1461033e5780636a4911fc1461035357610140565b8063150b7a02146101e957806333cfdd691461021f57806334927e6f146102415780633943f72c1461026f57806342b862701461029157610140565b3661014057005b610149336104ff565b8061015357503330145b6101785760405162461bcd60e51b815260040161016f90612f5e565b60405180910390fd5b6000610182610677565b600080356001600160e01b0319168152602082905260409020549091506001600160a01b0316806101c55760405162461bcd60e51b815260040161016f90612fd3565b3660008037600080366000845af43d6000803e8080156101e4573d6000f35b3d6000fd5b3480156101f557600080fd5b50610209610204366004612826565b61069b565b6040516102169190612dfb565b60405180910390f35b34801561022b57600080fd5b506102346106ab565b6040516102169190612df2565b34801561024d57600080fd5b5061026161025c366004612b5b565b6106b1565b604051610216929190612d9f565b34801561027b57600080fd5b5061028f61028a366004612b24565b610762565b005b34801561029d57600080fd5b5061028f6102ac3660046128dc565b6107b7565b3480156102bd57600080fd5b506102616102cc366004612b5b565b610907565b3480156102dd57600080fd5b506102f16102ec366004612ad0565b6109ac565b60405161021691906130f5565b34801561030a57600080fd5b50610261610319366004612b5b565b610aa9565b34801561032a57600080fd5b5061028f610339366004612a53565b610b4e565b34801561034a57600080fd5b50610234610c13565b34801561035f57600080fd5b5061023461036e366004612b00565b610c19565b34801561037f57600080fd5b5061039361038e366004612ad0565b610c36565b6040516102169190612de7565b3480156103ac57600080fd5b506103c06103bb366004612ad0565b610c47565b604051610216929190612e10565b3480156103da57600080fd5b506103e3610c9e565b6040516102169190612c80565b3480156103fc57600080fd5b5061041061040b366004612ad0565b610cbc565b6040516102169e9d9c9b9a999897969594939291906131b4565b34801561043657600080fd5b5061028f610445366004612b7c565b610d40565b34801561045657600080fd5b5061028f610465366004612be5565b610e0d565b34801561047657600080fd5b50610234610e8c565b34801561048b57600080fd5b5061023461049a366004612b00565b610e92565b3480156104ab57600080fd5b506102346104ba3660046129ea565b610eba565b3480156104cb57600080fd5b506102f16104da366004612ad0565b611100565b3480156104eb57600080fd5b5061028f6104fa3660046127ee565b61137c565b60008061050a610677565b905060008160050160009054906101000a90046001600160a01b03166001600160a01b0316633a8141cc6040518163ffffffff1660e01b815260040160006040518083038186803b15801561055e57600080fd5b505afa158015610572573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261059a9190810190612907565b805190915060005b8181101561066957600584015483516001600160a01b0380891692169063211b20a3908690859081106105d157fe5b60200260200101516040518263ffffffff1660e01b81526004016105f59190612df2565b604080518083038186803b15801561060c57600080fd5b505afa158015610620573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106449190612a02565b516001600160a01b03161415610661576001945050505050610672565b6001016105a2565b50600093505050505b919050565b7fd5aa5c52d76b5d2be1bece4b96c91e533fe2611adb0c19cf868dadf921fc13b890565b630a85bd0160e11b949350505050565b60025490565b60015460609060009083908590038111156106ce57506001548490035b8067ffffffffffffffff811180156106e557600080fd5b5060405190808252806020026020018201604052801561070f578160200160208202803683370190505b50925060005b818110156107565760018187018154811061072c57fe5b906000526020600020015484828151811061074357fe5b6020908102919091010152600101610715565b50840190509250929050565b61076b336104ff565b8061077557503330145b6107915760405162461bcd60e51b815260040161016f90612f5e565b60009283526006602090815260408085206001600160a01b039094168552929052912055565b60006107c1610677565b90508060050160009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561081357600080fd5b505afa158015610827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084b91906127d2565b6001600160a01b0316336001600160a01b03161461087b5760405162461bcd60e51b815260040161016f9061309d565b6000610885610677565b60048101549091506001600160a01b031660006108a3868387611749565b90508085146108c45760405162461bcd60e51b815260040161016f90613046565b7fbfed55bdcd242e3dd0f60ddd7d1e87c67f61c34cd9527b3e6455d841b10253628683836040516108f793929190612c94565b60405180910390a1505050505050565b600254606090600090839085900381111561092457506002548490035b8067ffffffffffffffff8111801561093b57600080fd5b50604051908082528060200260200182016040528015610965578160200160208202803683370190505b50925060005b818110156107565760028187018154811061098257fe5b906000526020600020015484828151811061099957fe5b602090810291909101015260010161096b565b6109b461271c565b5060008181526005602081815260409283902083516101c081018552815480825260018301546001600160a01b0316938201939093526002808301546001600160801b0319608091821b1696830196909652600383015460608301526004830154958201959095529281015460a0840152600681015460c0840152600781015460e0840152600881015480850b850b850b61010085015263010000009004840b840b90930b6101208301526009830154610140830152600a830154610160830152600b830154610180830152600c909201546101a0820152906106725760405162461bcd60e51b815260040161016f90612fb6565b6004546060906000908390859003811115610ac657506004548490035b8067ffffffffffffffff81118015610add57600080fd5b50604051908082528060200260200182016040528015610b07578160200160208202803683370190505b50925060005b8181101561075657600481870181548110610b2457fe5b9060005260206000200154848281518110610b3b57fe5b6020908102919091010152600101610b0d565b610b57336104ff565b80610b6157503330145b610b7d5760405162461bcd60e51b815260040161016f90612f5e565b6020808201518251600090815260059283905260408082206004019290925581840151845182528282209093019290925560608301518351835281832060090155608083015183518352818320600a015560a083015183518352818320600b015560c083015183518352818320600c015582518252808220600601829055825182528120600701558051610c1090611787565b50565b60045490565b600660209081526000928352604080842090915290825290205481565b6000610c41826117ec565b92915050565b60008181526005602052604081205481908390610c765760405162461bcd60e51b815260040161016f90612e8e565b505050600090815260056020526040902060080154600281810b926301000000909204900b90565b600080610ca9610677565b600401546001600160a01b031691505090565b600560208190526000918252604090912080546001820154600280840154600385015460048601549686015460068701546007880154600889015460098a0154600a8b0154600b8c0154600c909c01549a9c6001600160a01b03909a169b60809890981b9a96999895979496939583810b956301000000909404900b93919290918e565b610d49336104ff565b80610d5357503330145b610d6f5760405162461bcd60e51b815260040161016f90612f5e565b87610d79816117ec565b610d955760405162461bcd60e51b815260040161016f90612ee6565b600089815260056020819052604090912089815560088101805462ffffff191660028b810b62ffffff9081169290921765ffffff00000019166301000000918c900b92909216021790556004810187905590810185905560068101849055600701829055610e0288611834565b505050505050505050565b610e16336104ff565b80610e2057503330145b610e3c5760405162461bcd60e51b815260040161016f90612f5e565b6000848152600560205260409020548490610e695760405162461bcd60e51b815260040161016f90612e8e565b506000938452600560205260409093206003810192909255600682015560070155565b60015490565b60009182526006602090815260408084206001600160a01b0393909316845291905290205490565b6000610ec5336104ff565b80610ecf57503330145b610eeb5760405162461bcd60e51b815260040161016f90612f5e565b610ef36119ab565b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601819055604080516101c08101825284358152919250602082810191610f4e919086019086016127b6565b6001600160a01b03168152602001610f6c60608501604086016129a8565b6001600160801b03191681526020018360600135815260200160008152602001600081526020018360c0013581526020018360e001358152602001836080016020810190610fba91906129d0565b60020b8152602001610fd260c0850160a086016129d0565b600290810b82526000602080840182905260408085018390526060808601849052608095860184905287845260058084529382902087518155928701516001840180546001600160a01b039092166001600160a01b031990921691909117905590860151828501805491871c6001600160801b0319909216919091179055850151600382015592840151600484015560a08401519083015560c0830151600683015560e08301516007830155610100830151600883018054610120860151840b62ffffff90811663010000000265ffffff000000199490950b1662ffffff1990911617919091169190911790556101408201516009820155610160820151600a820155610180820151600b8201556101a090910151600c909101556110f78235611834565b610672816119b9565b61110861271c565b60005b6001548110156112355760006001828154811061112457fe5b90600052602060002001549050836005600083815260200190815260200160002060000154141561122c5760009081526005602081815260409283902083516101c0810185528154815260018201546001600160a01b0316928101929092526002808201546001600160801b0319608091821b1695840195909552600382015460608401526004820154948301949094529182015460a0820152600682015460c0820152600782015460e0820152600882015480840b840b840b61010083015263010000009004830b830b90920b6101208301526009810154610140830152600a810154610160830152600b810154610180830152600c01546101a082015291506106729050565b5060010161110b565b5060005b6002548110156113635760006002828154811061125257fe5b90600052602060002001549050836005600083815260200190815260200160002060000154141561135a5760009081526005602081815260409283902083516101c0810185528154815260018201546001600160a01b0316928101929092526002808201546001600160801b0319608091821b1695840195909552600382015460608401526004820154948301949094529182015460a0820152600682015460c0820152600782015460e0820152600882015480840b840b840b61010083015263010000009004830b830b90920b6101208301526009810154610140830152600a810154610160830152600b810154610180830152600c01546101a082015291506106729050565b50600101611239565b5060405162461bcd60e51b815260040161016f90612fb6565b6000611386610677565b9050336001600160a01b03168160050160009054906101000a90046001600160a01b03166001600160a01b0316632d2c5b586040518163ffffffff1660e01b815260040160206040518083038186803b1580156113e257600080fd5b505afa1580156113f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141a91906127d2565b6001600160a01b0316146114405760405162461bcd60e51b815260040161016f90612f40565b600054610100900460ff16806114595750611459611b35565b80611467575060005460ff16155b6114a25760405162461bcd60e51b815260040180806020018281038252602e8152602001806132d5602e913960400191505060405180910390fd5b600054610100900460ff161580156114cd576000805460ff1961ff0019909116610100171660011790555b60006114d7610677565b6004810180546001600160a01b038089166001600160a01b031992831617909255600390920180549187169190921617905550801561151c576000805461ff00191690555b50505050565b6001600160a01b0381166115485760405162461bcd60e51b815260040161016f90613063565b6000611552610677565b6004810180546001600160a01b031981166001600160a01b03868116918217909355929350169081146115c057826001600160a01b0316816001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35b505050565b825160005b818110156117035760008582815181106115e057fe5b6020026020010151602001519050600060028111156115fb57fe5b81600281111561160757fe5b141561164a5761164586838151811061161c57fe5b60200260200101516000015187848151811061163457fe5b602002602001015160400151611b46565b6116fa565b600181600281111561165857fe5b14156116965761164586838151811061166d57fe5b60200260200101516000015187848151811061168557fe5b602002602001015160400151611c56565b60028160028111156116a457fe5b14156116e2576116458683815181106116b957fe5b6020026020010151600001518784815181106116d157fe5b602002602001015160400151611d6f565b60405162461bcd60e51b815260040161016f90613029565b506001016115ca565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67384848460405161173793929190612cb8565b60405180910390a161151c8383611e22565b6000806117568530611f14565b90508083106117675780915061176b565b8291505b61177f6001600160a01b0386168584611f9a565b509392505050565b80611791816117ec565b6117ad5760405162461bcd60e51b815260040161016f90612ee6565b6117b682611fec565b50600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0155565b6000805b60015481101561182b57826001828154811061180857fe5b90600052602060002001541415611823576001915050610672565b6001016117f0565b50600092915050565b80600061183f610677565b9050306001600160a01b03168160030160009054906101000a90046001600160a01b03166001600160a01b0316635bfccac96040518163ffffffff1660e01b815260040160206040518083038186803b15801561189b57600080fd5b505afa1580156118af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d391906127d2565b6001600160a01b0316636352211e846040518263ffffffff1660e01b81526004016118fe9190612df2565b60206040518083038186803b15801561191657600080fd5b505afa15801561192a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194e91906127d2565b6001600160a01b0316146119745760405162461bcd60e51b815260040161016f90612f04565b5050600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0155565b600380546001019081905590565b60006119c3610677565b905060008160050160009054906101000a90046001600160a01b03166001600160a01b0316633a8141cc6040518163ffffffff1660e01b815260040160006040518083038186803b158015611a1757600080fd5b505afa158015611a2b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a539190810190612907565b805190915060005b81811015611b2e57600584015483516000916001600160a01b03169063211b20a390869085908110611a8957fe5b60200260200101516040518263ffffffff1660e01b8152600401611aad9190612df2565b604080518083038186803b158015611ac457600080fd5b505afa158015611ad8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afc9190612a02565b602080820151600089815260068352604080822094516001600160a01b03168252939092529190205550600101611a5b565b5050505050565b6000611b403061207c565b15905090565b8051611b645760405162461bcd60e51b815260040161016f906130bb565b6000611b6e610677565b90506001600160a01b038316611b965760405162461bcd60e51b815260040161016f90612e71565b6001600160a01b03831660009081526001820160205260409020546001600160601b038116611bc957611bc98285612082565b825160005b81811015611c4e576000858281518110611be457fe5b6020908102919091018101516001600160e01b031981166000908152918790526040909120549091506001600160a01b03168015611c345760405162461bcd60e51b815260040161016f90612f99565b611c408683878b6120ca565b505060019283019201611bce565b505050505050565b8051611c745760405162461bcd60e51b815260040161016f90612f7c565b6000611c7e610677565b90506001600160a01b038316611ca65760405162461bcd60e51b815260040161016f90612fef565b6001600160a01b03831660009081526001820160205260409020546001600160601b038116611cd957611cd98285612082565b825160005b81811015611c4e576000858281518110611cf457fe5b6020908102919091018101516001600160e01b031981166000908152918790526040909120549091506001600160a01b03908116908816811415611d4a5760405162461bcd60e51b815260040161016f90612ec9565b611d5586828461216a565b611d618683878b6120ca565b505060019283019201611cde565b8051611d8d5760405162461bcd60e51b815260040161016f906130d8565b6000611d97610677565b90506001600160a01b03831615611dc05760405162461bcd60e51b815260040161016f90613080565b815160005b81811015611b2e576000848281518110611ddb57fe5b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b0316611e1885828461216a565b5050600101611dc5565b6001600160a01b038216611e5457805115611e4f5760405162461bcd60e51b815260040161016f90612e37565b611f10565b8051611e725760405162461bcd60e51b815260040161016f90612eac565b600080836001600160a01b031683604051611e8d9190612c64565b600060405180830381855af49150503d8060008114611ec8576040519150601f19603f3d011682016040523d82523d6000602084013e611ecd565b606091505b50915091508161151c57805115611ef8578060405162461bcd60e51b815260040161016f9190612e24565b60405162461bcd60e51b815260040161016f90612e54565b5050565b6040516370a0823160e01b81526000906001600160a01b038416906370a0823190611f43908590600401612c80565b60206040518083038186803b158015611f5b57600080fd5b505afa158015611f6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f939190612ae8565b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526115c0908490612455565b60005b600154811015611f1057816001828154811061200757fe5b906000526020600020015414156120745760018054600019810190811061202a57fe5b90600052602060002001546001828154811061204257fe5b600091825260209091200155600180548061205957fe5b60019003818190600052602060002001600090559055611f10565b600101611fef565b3b151590565b6002820180546001600160a01b0390921660008181526001948501602090815260408220860185905594840183559182529290200180546001600160a01b0319169091179055565b6001600160e01b0319831660008181526020868152604080832080546001600160601b03909716600160a01b026001600160a01b0397881617815594909516808352600180890183529583208054968701815583528183206008870401805460e09890981c60046007909816979097026101000a96870263ffffffff9097021990971695909517909555529290915281546001600160a01b031916179055565b6001600160a01b0382166121905760405162461bcd60e51b815260040161016f9061300c565b6001600160a01b0382163014156121b95760405162461bcd60e51b815260040161016f90612f23565b6001600160e01b03198116600090815260208481526040808320546001600160a01b03861684526001870190925290912054600160a01b9091046001600160601b031690600019018082146122e5576001600160a01b0384166000908152600186016020526040812080548390811061222e57fe5b600091825260208083206008830401546001600160a01b038916845260018a019091526040909220805460079092166004026101000a90920460e01b92508291908590811061227957fe5b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528690526040902080546001600160a01b0316600160a01b6001600160601b038516021790555b6001600160a01b0384166000908152600186016020526040902080548061230857fe5b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b031985168252869052604081205580611b2e5760028501546001600160a01b0385166000908152600187810160205260409091200154600019909101908082146123ff57600087600201838154811061239557fe5b6000918252602090912001546002890180546001600160a01b0390921692508291849081106123c057fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055929091168152600189810190925260409020018190555b8660020180548061240c57fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0388168252600189810190915260408220015550505050505050565b60006124aa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125069092919063ffffffff16565b8051909150156115c0578080602001905160208110156124c957600080fd5b50516115c05760405162461bcd60e51b815260040180806020018281038252602a815260200180613303602a913960400191505060405180910390fd5b6060612515848460008561251d565b949350505050565b60608247101561255e5760405162461bcd60e51b81526004018080602001828103825260268152602001806132af6026913960400191505060405180910390fd5b6125678561207c565b6125b8576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106125f65780518252601f1990920191602091820191016125d7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612658576040519150601f19603f3d011682016040523d82523d6000602084013e61265d565b606091505b509150915061266d828286612678565b979650505050505050565b60608315612687575081611f93565b8251156126975782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156126e15781810151838201526020016126c9565b50505050905090810190601f16801561270e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b604051806101c001604052806000815260200160006001600160a01b0316815260200160006001600160801b03191681526020016000815260200160008152602001600081526020016000815260200160008152602001600060020b8152602001600060020b8152602001600081526020016000815260200160008152602001600081525090565b8035600281900b811461067257600080fd5b6000602082840312156127c7578081fd5b8135611f9381613299565b6000602082840312156127e3578081fd5b8151611f9381613299565b60008060408385031215612800578081fd5b823561280b81613299565b9150602083013561281b81613299565b809150509250929050565b6000806000806080858703121561283b578182fd5b843561284681613299565b935060208581013561285781613299565b935060408601359250606086013567ffffffffffffffff8082111561287a578384fd5b818801915088601f83011261288d578384fd5b81358181111561289957fe5b6128ab601f8201601f19168501613249565b915080825289848285010111156128c0578485fd5b8084840185840137810190920192909252939692955090935050565b600080604083850312156128ee578182fd5b82356128f981613299565b946020939093013593505050565b60006020808385031215612919578182fd5b825167ffffffffffffffff80821115612930578384fd5b818501915085601f830112612943578384fd5b81518181111561294f57fe5b838102915061295f848301613249565b8181528481019084860184860187018a1015612979578788fd5b8795505b8386101561299b57805183526001959095019491860191860161297d565b5098975050505050505050565b6000602082840312156129b9578081fd5b81356001600160801b031981168114611f93578182fd5b6000602082840312156129e1578081fd5b611f93826127a4565b600061010082840312156129fc578081fd5b50919050565b600060408284031215612a13578081fd5b6040516040810181811067ffffffffffffffff82111715612a3057fe5b6040528251612a3e81613299565b81526020928301519281019290925250919050565b600060e08284031215612a64578081fd5b60405160e0810181811067ffffffffffffffff82111715612a8157fe5b8060405250823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201528091505092915050565b600060208284031215612ae1578081fd5b5035919050565b600060208284031215612af9578081fd5b5051919050565b60008060408385031215612b12578182fd5b82359150602083013561281b81613299565b600080600060608486031215612b38578081fd5b833592506020840135612b4a81613299565b929592945050506040919091013590565b60008060408385031215612b6d578182fd5b50508035926020909101359150565b600080600080600080600080610100898b031215612b98578586fd5b8835975060208901359650612baf60408a016127a4565b9550612bbd60608a016127a4565b979a969950949760808101359660a0820135965060c0820135955060e0909101359350915050565b60008060008060808587031215612bfa578182fd5b5050823594602084013594506040840135936060013592509050565b6001600160a01b03169052565b6001600160801b0319169052565b60008151808452612c4981602086016020860161326d565b601f01601f19169290920160200192915050565b60020b9052565b60008251612c7681846020870161326d565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b606080825284518282018190526000919060809081850190602080820287018401818b01875b84811015612d7057898303607f19018652815180516001600160a01b03168452848101518985019060038110612d1057fe5b858701526040918201519185018a9052815190819052908501908a90898601905b80831015612d5b5783516001600160e01b0319168252928701926001929092019190870190612d31565b50978601979450505090830190600101612cde565b5050612d7e8289018b612c16565b8781036040890152612d90818a612c31565b9b9a5050505050505050505050565b604080825283519082018190526000906020906060840190828701845b82811015612dd857815184529284019290840190600101612dbc565b50505092019290925292915050565b901515815260200190565b90815260200190565b6001600160e01b031991909116815260200190565b600292830b8152910b602082015260400190565b600060208252611f936020830184612c31565b60208082526003908201526205349360ec1b604082015260600190565b60208082526003908201526229a4a960e91b604082015260600190565b60208082526003908201526205341360ec1b604082015260600190565b602080825260049082015263504d504560e01b604082015260600190565b60208082526003908201526253494360e81b604082015260600190565b60208082526003908201526229a92960e91b604082015260600190565b6020808252600490820152632826a82960e11b604082015260600190565b6020808252600590820152640504d4f4f560dc1b604082015260600190565b60208082526003908201526253524960e81b604082015260600190565b6020808252600490820152632826a7a360e11b604082015260600190565b602080825260049082015263504d4f5760e01b604082015260600190565b60208082526003908201526229a92360e91b604082015260600190565b60208082526003908201526253464560e81b604082015260600190565b602080825260039082015262504d5360e81b604082015260600190565b602080825260029082015261504d60f01b604082015260600190565b60208082526003908201526205352360ec1b604082015260600190565b60208082526003908201526253524560e81b604082015260600190565b60208082526003908201526229a4a360e91b604082015260600190565b602080825260039082015262504d4560e81b604082015260600190565b602080825260039082015262534e4f60e81b604082015260600190565b60208082526003908201526205345360ec1b604082015260600190565b602080825260049082015263504d4f4760e01b604082015260600190565b602080825260039082015262534e5360e81b604082015260600190565b60208082526003908201526253455360e81b604082015260600190565b815181526020808301516101c083019161311190840182612c16565b5060408301516131246040840182612c23565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e08301526101008084015161316a82850182612c5d565b50506101208084015161317f82850182612c5d565b50506101408381015190830152610160808401519083015261018080840151908301526101a092830151929091019190915290565b8e81526001600160a01b038e1660208201526001600160801b03198d166040820152606081018c9052608081018b905260a081018a905260c0810189905260e081018890526101c0810161320c610100830189612c5d565b61321a610120830188612c5d565b856101408301528461016083015283610180830152826101a08301529f9e505050505050505050505050505050565b60405181810167ffffffffffffffff8111828210171561326557fe5b604052919050565b60005b83811015613288578181015183820152602001613270565b8381111561151c5750506000910152565b6001600160a01b0381168114610c1057600080fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220b9103edbf981bdaf50e2fdf802c933497c5e97ba3b357807563049133fadf67964736f6c63430007060033a26469706673582212207865b7c10e7deb8f4e04018f8ab6b774f8107c4bb6a6dc7996f6012fc05bc9d164736f6c63430007060033",
  "devdoc": {
    "events": {
      "PositionManagerCreated(address,address)": {
        "params": {
          "positionManager": "address of PositionManager",
          "user": "address of user"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "create()": {
        "returns": {
          "_0": "address return new PositionManager address"
        }
      },
      "getPositionManagers(uint256,uint256)": {
        "params": {
          "cursor": "is the aforementioned cursor. It simply indicates the starting index for enumeration. The first call should pass 0, and subsequent calls should pass the returned newCursor.",
          "howMany": "indicates how many items should be returned. If there aren’t enough remaining items in the array, the function will return fewer items."
        },
        "returns": {
          "managers": "address[] return array of PositionManager addresses",
          "newCursor": "uint256 return the new cursor"
        }
      },
      "getPositionManagersLength()": {
        "returns": {
          "_0": "uint256 return length of PositionManager array"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "updateActionData((address,uint8,bytes4[]))": {
        "params": {
          "facetAction": "facet of the action to add or remove from position manager factory"
        }
      },
      "updateDiamond(address,(address,uint8,bytes4[])[])": {
        "details": "Add (0) Replace(1) Remove(2)",
        "params": {
          "actionsToUpdate": "contains the facet addresses and function selectors of the actions",
          "positionManager": "address of the position manager on which one should modified an action"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "PositionManagerCreated(address,address)": {
        "notice": "emitted when a new position manager is created"
      }
    },
    "kind": "user",
    "methods": {
      "create()": {
        "notice": "deploy new positionManager and assign to userAddress"
      },
      "getPositionManagers(uint256,uint256)": {
        "notice": "get the array of position manager addresses"
      },
      "getPositionManagersLength()": {
        "notice": "get the length of position manager array"
      },
      "pause()": {
        "notice": "pause the factory"
      },
      "unpause()": {
        "notice": "unpause the factory"
      },
      "updateActionData((address,uint8,bytes4[]))": {
        "notice": "adds or removes an action to/from the factory"
      },
      "updateDiamond(address,(address,uint8,bytes4[])[])": {
        "notice": "update actions already existing on positionManager"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1782,
        "contract": "contracts/PositionManagerFactory.sol:PositionManagerFactory",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6086,
        "contract": "contracts/PositionManagerFactory.sol:PositionManagerFactory",
        "label": "positionManagers",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6089,
        "contract": "contracts/PositionManagerFactory.sol:PositionManagerFactory",
        "label": "actions",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(FacetCut)13631_storage)dyn_storage"
      },
      {
        "astId": 6094,
        "contract": "contracts/PositionManagerFactory.sol:PositionManagerFactory",
        "label": "userToPositionManager",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes4)dyn_storage": {
        "base": "t_bytes4",
        "encoding": "dynamic_array",
        "label": "bytes4[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(FacetCut)13631_storage)dyn_storage": {
        "base": "t_struct(FacetCut)13631_storage",
        "encoding": "dynamic_array",
        "label": "struct IDiamondCut.FacetCut[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_enum(FacetCutAction)13623": {
        "encoding": "inplace",
        "label": "enum IDiamondCut.FacetCutAction",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(FacetCut)13631_storage": {
        "encoding": "inplace",
        "label": "struct IDiamondCut.FacetCut",
        "members": [
          {
            "astId": 13625,
            "contract": "contracts/PositionManagerFactory.sol:PositionManagerFactory",
            "label": "facetAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13627,
            "contract": "contracts/PositionManagerFactory.sol:PositionManagerFactory",
            "label": "action",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(FacetCutAction)13623"
          },
          {
            "astId": 13630,
            "contract": "contracts/PositionManagerFactory.sol:PositionManagerFactory",
            "label": "functionSelectors",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes4)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}