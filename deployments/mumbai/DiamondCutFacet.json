{
  "address": "0xbEb7dC12B7cb818A699044c5594FEBCa49805a40",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x42f571b01813c6dacd00cc24e11c19897f0a3f2ab9e69bd1c0c9a09c37d88fd3",
  "receipt": {
    "to": null,
    "from": "0xcafCE5363A2dEC41e0597B6B3c6c1A11ab219698",
    "contractAddress": "0xbEb7dC12B7cb818A699044c5594FEBCa49805a40",
    "transactionIndex": 11,
    "gasUsed": "983592",
    "logsBloom": "0x
    "blockHash": "0xf6cb27d582d7fd75e2e960047b8ced579c8b7501444c1b02da05f98f13c79907",
    "transactionHash": "0x42f571b01813c6dacd00cc24e11c19897f0a3f2ab9e69bd1c0c9a09c37d88fd3",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 39019715,
        "transactionHash": "0x42f571b01813c6dacd00cc24e11c19897f0a3f2ab9e69bd1c0c9a09c37d88fd3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000cafce5363a2dec41e0597b6b3c6c1a11ab219698",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000054fbfbda039300000000000000000000000000000000000000000000000000d46a55e1c1d4c000000000000000000000000000000000000000000000010652e57ab27e5f0befc0000000000000000000000000000000000000000000000000d41559e5e7d12d00000000000000000000000000000000000000000000010652e5cfae7a390f82c",
        "logIndex": 67,
        "blockHash": "0xf6cb27d582d7fd75e2e960047b8ced579c8b7501444c1b02da05f98f13c79907"
      }
    ],
    "blockNumber": 39019715,
    "cumulativeGasUsed": "2839249",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "08f28bc02234e5e762609eefb667e33a",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"_calldata\":\"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init\",\"_diamondCut\":\"Contains the facet addresses and function selectors\",\"_init\":\"The address of the contract or facet to execute _calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Add/replace/remove any number of functions and optionally execute         a function with delegatecall\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DiamondCutFacet.sol\":\"DiamondCutFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\n/******************************************************************************\\\\\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport { IDiamondCut } from \\\"./interfaces/IDiamondCut.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n\\ncontract DiamondCutFacet is IDiamondCut {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external override {\\n        PositionManagerStorage.enforceIsGovernance();\\n        PositionManagerStorage.diamondCut(_diamondCut, _init, _calldata);\\n    }\\n}\\n\",\"keccak256\":\"0xe805055b4fea07a783d3f1161689582282322971b52d892959473bb5ddac371c\",\"license\":\"GPL-2.0\"},\"contracts/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./interfaces/IPositionManager.sol\\\";\\nimport \\\"./interfaces/IUniswapAddressHolder.sol\\\";\\nimport \\\"./interfaces/IDiamondCut.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\n\\nstruct FacetAddressAndPosition {\\n    address facetAddress;\\n    uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n}\\n\\nstruct FacetFunctionSelectors {\\n    bytes4[] functionSelectors;\\n    uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n}\\n\\nstruct StorageStruct {\\n    // maps function selector to the facet address and\\n    // the position of the selector in the facetFunctionSelectors.selectors array\\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n    // maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n    // facet addresses\\n    address[] facetAddresses;\\n    IUniswapAddressHolder uniswapAddressHolder;\\n    address owner;\\n    IRegistry registry;\\n    mapping(bytes32 => bytes32) storageVars;\\n}\\n\\nlibrary PositionManagerStorage {\\n    bytes32 private constant key = keccak256(\\\"position-manager-storage-location\\\");\\n\\n    ///@notice get the storage from memory location\\n    ///@return s the storage struct\\n    function getStorage() internal pure returns (StorageStruct storage s) {\\n        bytes32 k = key;\\n        assembly {\\n            s.slot := k\\n        }\\n    }\\n\\n    ///@notice emitted when a contract changes ownership\\n    ///@param previousOwner previous owner of the contract\\n    ///@param newOwner new owner of the contract\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    ///@notice set the owner field on the storage struct\\n    ///@param _newOwner new owner of the storage struct\\n    function setContractOwner(address _newOwner) internal {\\n        require(_newOwner != address(0), \\\"SNO\\\");\\n        StorageStruct storage ds = getStorage();\\n        address previousOwner = ds.owner;\\n        ds.owner = _newOwner;\\n        if (_newOwner != previousOwner) {\\n            emit OwnershipTransferred(previousOwner, _newOwner);\\n        }\\n    }\\n\\n    ///@notice make sure that a function is called by the PositionManagerFactory contract\\n    function enforceIsGovernance() internal view {\\n        StorageStruct storage ds = getStorage();\\n        require(msg.sender == ds.registry.positionManagerFactoryAddress(), \\\"SMF\\\");\\n    }\\n\\n    ///@notice emitted when a facet is cut into the diamond\\n    ///@param _diamondCut facet cut\\n    ///@param _init diamond cut init address\\n    ///@param _calldata facet cut calldata\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    ///@notice Internal function version of diamondCut\\n    ///@param _diamondCut facet cut\\n    ///@param _init diamond cut init address\\n    ///@param _calldata facet cut calldata\\n    function diamondCut(IDiamondCut.FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n        uint256 _diamondCutLength = _diamondCut.length;\\n        for (uint256 facetIndex; facetIndex < _diamondCutLength; ++facetIndex) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"SIF\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    ///@notice Add functions to facet\\n    ///@param _facetAddress address of the facet\\n    ///@param _functionSelectors function selectors to add\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length != 0, \\\"SNS\\\");\\n        StorageStruct storage ds = getStorage();\\n        require(_facetAddress != address(0), \\\"SA0\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n\\n        uint256 _functionSelectorsLength = _functionSelectors.length;\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectorsLength; ++selectorIndex) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"SFE\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    ///@notice Add facet by address\\n    ///@param ds storage struct\\n    ///@param _facetAddress address of the facet\\n    function addFacet(StorageStruct storage ds, address _facetAddress) internal {\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n    ///@notice Add single function to facet\\n    ///@param ds storage struct\\n    ///@param _selector function selector to add\\n    ///@param _selectorPosition position of the function selector in the facetFunctionSelectors array\\n    function addFunction(\\n        StorageStruct storage ds,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    ///@notice Remove single function from facet\\n    ///@param ds storage struct\\n    ///@param _facetAddress address of the facet\\n    ///@param _selector function selector to remove\\n    function removeFunction(StorageStruct storage ds, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"SRE\\\");\\n        require(_facetAddress != address(this), \\\"SRI\\\");\\n\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    ///@notice Replace functions in facet\\n    ///@param _facetAddress address of the facet\\n    ///@param _functionSelectors function selectors to replace\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length != 0, \\\"SRF\\\");\\n        StorageStruct storage ds = getStorage();\\n        require(_facetAddress != address(0), \\\"SR0\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n\\n        uint256 _functionSelectorsLength = _functionSelectors.length;\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectorsLength; ++selectorIndex) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n\\n            require(oldFacetAddress != _facetAddress, \\\"SRR\\\");\\n\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    ///@notice remove functions in facet\\n    ///@param _facetAddress address of the facet\\n    ///@param _functionSelectors function selectors to remove\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length != 0, \\\"SES\\\");\\n\\n        StorageStruct storage ds = getStorage();\\n\\n        require(_facetAddress == address(0), \\\"SE0\\\");\\n\\n        uint256 _functionSelectorsLength = _functionSelectors.length;\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectorsLength; ++selectorIndex) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    ///@notice Initialize the diamond cut\\n    ///@param _init delegatecall address\\n    ///@param _calldata delegatecall data\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"SI0\\\");\\n        } else {\\n            require(_calldata.length != 0, \\\"SIC\\\");\\n\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n\\n            if (!success) {\\n                if (error.length != 0) {\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"SIR\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    ///@notice check to verify that the key is valid and already whitelisted by governance\\n    ///@param hashedKey key to check\\n    modifier verifyKey(bytes32 hashedKey) {\\n        StorageStruct storage ds = getStorage();\\n\\n        bytes32 storageVariableHash = ds.storageVars[hashedKey];\\n\\n        require(storageVariableHash == bytes32(uint256(1)), \\\"SDK\\\");\\n        _;\\n    }\\n\\n    ///@notice get a specific slot of memory by the given key and read the first 32 bytes\\n    ///@param hashedKey key to read from\\n    function getDynamicStorageValue(bytes32 hashedKey) internal view verifyKey(hashedKey) returns (bytes32 value) {\\n        assembly {\\n            value := sload(hashedKey)\\n        }\\n    }\\n\\n    ///@dev supposing we've already set the key on the mapping, we can't insert a wrong key\\n    ///@notice set a specific slot of memory by the given key and write the first 32 bytes\\n    ///@param hashedKey key to write to\\n    ///@param value value to write\\n    function setDynamicStorageValue(bytes32 hashedKey, bytes32 value) internal verifyKey(hashedKey) {\\n        assembly {\\n            sstore(hashedKey, value)\\n        }\\n    }\\n\\n    ///@notice add a new hashedKey to the mapping in storage, sort of whitelist\\n    ///@param hashedKey key to add to the mapping\\n    function addDynamicStorageKey(bytes32 hashedKey) internal {\\n        StorageStruct storage ds = getStorage();\\n\\n        bytes32 storageVariableHash = ds.storageVars[hashedKey];\\n\\n        ///@dev return if the key already exists\\n        if (storageVariableHash != bytes32(0)) return;\\n\\n        ds.storageVars[hashedKey] = bytes32(uint256(1));\\n    }\\n}\\n\",\"keccak256\":\"0x4f65978abc8184c6d43db62e691c8ccf1e98e5dfdd1011baebbbe3e472c2df1b\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x51d83386aa10023cb9585d489b9bf7489aa7e43e6996fa67d01a856b8be25fdd\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IPositionManager {\\n    struct PositionInfo {\\n        uint256 tokenId;\\n        address strategyProvider;\\n        bytes16 strategyId;\\n        uint256 totalDepositUSDValue;\\n        uint256 amount0CollectedFee;\\n        uint256 amount1CollectedFee;\\n        uint256 amount0Leftover;\\n        uint256 amount1Leftover;\\n        int24 tickLowerDiff;\\n        int24 tickUpperDiff;\\n        uint256 amount0Returned;\\n        uint256 amount1Returned;\\n        uint256 amount0ReturnedUsdValue;\\n        uint256 amount1ReturnedUsdValue;\\n    }\\n\\n    ///@notice create position\\n    ///@param tokenId ID of the position\\n    ///@param strategyProvider The address of the strategy provider\\n    ///@param strategyId The ID of the strategy\\n    ///@param totalDepositUSDValue The total deposit value in USD\\n    ///@param tickLowerDiff difference between the current tick of the position and the provied lower tick\\n    ///@param tickUpperDiff difference between the current tick of the position and the provied upper tick\\n    ///@param amount0Leftover The amount of token0 leftover after rebalance\\n    ///@param amount1Leftover The amount of token1 leftover after rebalance\\n    struct CreatePositionInput {\\n        uint256 tokenId;\\n        address strategyProvider;\\n        bytes16 strategyId;\\n        uint256 totalDepositUSDValue;\\n        int24 tickLowerDiff;\\n        int24 tickUpperDiff;\\n        uint256 amount0Leftover;\\n        uint256 amount1Leftover;\\n    }\\n\\n    ///@notice create position\\n    ///@param inputs CreatePositionInput struct\\n    ///@return positionId ID of the position\\n    function createPosition(CreatePositionInput calldata inputs) external returns (uint256 positionId);\\n\\n    ///@notice update position total deposit USD value\\n    ///@param positionId ID of the position\\n    ///@param _totalDepositUSDValue The total deposit value in USD\\n    ///@param _amount0Leftover The amount of token0 leftover after increasing liquidity\\n    ///@param _amount1Leftover The amount of token1 leftover after increasing liquidity\\n    function middlewareIncreaseLiquidity(\\n        uint256 positionId,\\n        uint256 _totalDepositUSDValue,\\n        uint256 _amount0Leftover,\\n        uint256 _amount1Leftover\\n    ) external;\\n\\n    ///@notice get position info from tokenId\\n    ///@param tokenId ID of the position\\n    ///@return positionInfo PositionInfo struct\\n    function getPositionInfoFromTokenId(uint256 tokenId) external view returns (PositionInfo memory positionInfo);\\n\\n    ///@notice get position info from positionId\\n    ///@param positionId ID of the position\\n    ///@return positionInfo PositionInfo struct\\n    function getPositionInfo(uint256 positionId) external view returns (PositionInfo memory positionInfo);\\n\\n    ///@notice check if the position is running\\n    ///@param positionId ID of the position\\n    ///@return bool true if the position is running\\n    function isPositionRunning(uint256 positionId) external view returns (bool);\\n\\n    ///@notice transfer ERC20 tokens stuck in Position Manager to owner\\n    ///@param tokenAddress address of the token to be withdrawn\\n    function withdrawERC20ToOwner(address tokenAddress) external;\\n\\n    ///@notice middleware function to update position info for rebalance\\n    ///@param positionId ID of the position\\n    ///@param newTokenId ID of the new NFT\\n    ///@param tickLowerDiff The difference between the current tick and the tickLower\\n    ///@param tickUpperDiff The difference between the current tick and the tickUpper\\n    ///@param amount0CollectedFee The amount of token0 collected fee after rebalance\\n    ///@param amount1CollectedFee The amount of token1 collected fee after rebalance\\n    ///@param amount0Leftover The amount of token0 leftover after rebalance\\n    ///@param amount1Leftover The amount of token1 leftover after rebalance\\n    function middlewareRebalance(\\n        uint256 positionId,\\n        uint256 newTokenId,\\n        int24 tickLowerDiff,\\n        int24 tickUpperDiff,\\n        uint256 amount0CollectedFee,\\n        uint256 amount1CollectedFee,\\n        uint256 amount0Leftover,\\n        uint256 amount1Leftover\\n    ) external;\\n\\n    ///@notice struct for middleware withdraw\\n    ///@param positionId ID of the position\\n    ///@param amount0CollectedFee The amount of token0 collected fee after withdrwan\\n    ///@param amount1CollectedFee The amount of token1 collected fee after withdrwan\\n    ///@param amount0Returned The amount of token0 returned after withdrwan\\n    ///@param amount1Returned The amount of token1 returned after withdrwan\\n    ///@param amount0ReturnedUsdValue The amount of token0 returned in USD after withdrwan\\n    ///@param amount1ReturnedUsdValue The amount of token1 returned in USD after withdrwan\\n    struct MiddlewareWithdrawInput {\\n        uint256 positionId;\\n        uint256 amount0CollectedFee;\\n        uint256 amount1CollectedFee;\\n        uint256 amount0Returned;\\n        uint256 amount1Returned;\\n        uint256 amount0ReturnedUsdValue;\\n        uint256 amount1ReturnedUsdValue;\\n    }\\n\\n    ///@notice middleware function to update position info for withdraw\\n    ///@param input MiddlewareWithdrawInput struct\\n    function middlewareWithdraw(MiddlewareWithdrawInput memory input) external;\\n\\n    function setModuleData(uint256 positionId, address moduleAddress, bytes32 data) external;\\n\\n    function getPositionModuleData(uint256 _positionId, address _moduleAddress) external view returns (bytes32 data);\\n\\n    ///@notice get position lower tick diff and upper tick diff\\n    ///@param positionId ID of the position\\n    ///@return tickLowerDiff difference between the current tick of the position and the provied lower tick\\n    ///@return tickUpperDiff difference between the current tick of the position and the provied upper tick\\n    function getPositionTickDiffs(uint256 positionId) external view returns (int24, int24);\\n\\n    function getOwner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6bb07fe306fc2c5a2c7ad836d61a54596f50618174abe5c99ec6b9257ef0be7a\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IRegistry {\\n    struct Entry {\\n        address contractAddress;\\n        bytes32 defaultData;\\n    }\\n\\n    ///@notice check if the fee tier is allowable\\n    ///@param feeTier the fee tier to check\\n    ///@return true if the fee tier is allowable, false otherwise\\n    function isAllowableFeeTier(uint24 feeTier) external view returns (bool);\\n\\n    ///@notice get the list of fee tiers\\n    ///@return array of fee tiers\\n    function getFeeTiers() external view returns (uint24[] memory);\\n\\n    ///@notice get the list of allowable fee tiers\\n    ///@return array of allowable fee tiers\\n    function getAllowableFeeTiers() external view returns (uint24[] memory);\\n\\n    ///@notice return the address of PositionManagerFactory\\n    ///@return address of PositionManagerFactory\\n    function positionManagerFactoryAddress() external view returns (address);\\n\\n    ///@notice return the address of StrategyProviderWalletFactory\\n    ///@return address of StrategyProviderWalletFactory\\n    function strategyProviderWalletFactoryAddress() external view returns (address);\\n\\n    ///@notice return the address of weth9\\n    ///@return address of weth9\\n    function weth9() external view returns (address);\\n\\n    ///@notice return the address of Governance\\n    ///@return address of Governance\\n    function governance() external view returns (address);\\n\\n    ///@notice return the address of recipient of service fee\\n    ///@return address of recipient of service fee\\n    function serviceFeeRecipient() external view returns (address);\\n\\n    ///@notice return the max twap deviation\\n    ///@return int24 max twap deviation\\n    function maxTwapDeviation() external view returns (int24);\\n\\n    ///@notice return the twap duration\\n    ///@return uint32 twap duration\\n    function twapDuration() external view returns (uint32);\\n\\n    ///@notice return the address of USD value token\\n    ///@return address of USD value token\\n    function usdValueTokenAddress() external view returns (address);\\n\\n    ///@notice return the denominator of service fee ratio\\n    ///@return uint32 denominator of service fee ratio\\n    function serviceFeeDenominator() external view returns (uint32);\\n\\n    ///@notice return the address of Governance\\n    ///@return address of Governance\\n    function getModuleKeys() external view returns (bytes32[] memory);\\n\\n    ///@notice checks if the address is whitelisted as a keeper\\n    ///@param _keeper address to check\\n    ///@return bool true if the address is withelisted, false otherwise\\n    function whitelistedKeepers(address _keeper) external view returns (bool);\\n\\n    ///@notice get the module info by id\\n    ///@param _id id of the module\\n    ///@return Entry module info\\n    function getModuleInfo(bytes32 _id) external view returns (Entry memory);\\n\\n    ///@notice get service fee ratio for a given license amount\\n    ///@param _licenseAmount license amount to get service fee ratio\\n    function getServiceFeeRatioFromLicenseAmount(uint32 _licenseAmount) external view returns (uint32 ratio);\\n}\\n\",\"keccak256\":\"0xf01491fbe7aec6e223f1a90b69cc36b5ecee1386f23e0f052f19ff802195fe20\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IUniswapAddressHolder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IUniswapAddressHolder {\\n    ///@notice default getter for nonfungiblePositionManagerAddress\\n    ///@return address The address of the non fungible position manager\\n    function nonfungiblePositionManagerAddress() external view returns (address);\\n\\n    ///@notice default getter for uniswapV3FactoryAddress\\n    ///@return address The address of the Uniswap V3 factory\\n    function uniswapV3FactoryAddress() external view returns (address);\\n\\n    ///@notice default getter for swapRouterAddress\\n    ///@return address The address of the swap router\\n    function swapRouterAddress() external view returns (address);\\n\\n    ///@notice Set the address of nonfungible position manager\\n    ///@param newAddress new address of nonfungible position manager\\n    function setNonFungibleAddress(address newAddress) external;\\n\\n    ///@notice Set the address of the Uniswap V3 factory\\n    ///@param newAddress new address of the Uniswap V3 factory\\n    function setFactoryAddress(address newAddress) external;\\n\\n    ///@notice Set the address of uniV3 swap router\\n    ///@param newAddress new address of univ3 swap router\\n    function setSwapRouterAddress(address newAddress) external;\\n\\n    ///@notice Set the address of the registry\\n    ///@param newAddress The address of the registry\\n    function setRegistry(address newAddress) external;\\n}\\n\",\"keccak256\":\"0xa374214150de7a23de55401eeb0f118c4ec739211b215fe9de989db5fbfecdf1\",\"license\":\"GPL-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506110d3806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004361003e366004610ba8565b610045565b005b61004d61009e565b61009761005a8587610f98565b8484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061016e92505050565b5050505050565b60006100a86102f8565b90508060050160009054906101000a90046001600160a01b03166001600160a01b0316632d2c5b586040518163ffffffff1660e01b815260040160206040518083038186803b1580156100fa57600080fd5b505afa15801561010e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101329190610b85565b6001600160a01b0316336001600160a01b03161461016b5760405162461bcd60e51b815260040161016290610ee2565b60405180910390fd5b50565b825160005b818110156102ac57600085828151811061018957fe5b6020026020010151602001519050600060028111156101a457fe5b8160028111156101b057fe5b14156101f3576101ee8683815181106101c557fe5b6020026020010151600001518784815181106101dd57fe5b60200260200101516040015161031c565b6102a3565b600181600281111561020157fe5b141561023f576101ee86838151811061021657fe5b60200260200101516000015187848151811061022e57fe5b60200260200101516040015161042c565b600281600281111561024d57fe5b141561028b576101ee86838151811061026257fe5b60200260200101516000015187848151811061027a57fe5b602002602001015160400151610545565b60405162461bcd60e51b815260040161016290610ec5565b50600101610173565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738484846040516102e093929190610ca9565b60405180910390a16102f283836105f8565b50505050565b7fd5aa5c52d76b5d2be1bece4b96c91e533fe2611adb0c19cf868dadf921fc13b890565b805161033a5760405162461bcd60e51b815260040161016290610f1c565b60006103446102f8565b90506001600160a01b03831661036c5760405162461bcd60e51b815260040161016290610ddd565b6001600160a01b03831660009081526001820160205260409020546001600160601b03811661039f5761039f82856106ea565b825160005b818110156104245760008582815181106103ba57fe5b6020908102919091018101516001600160e01b031981166000908152918790526040909120549091506001600160a01b0316801561040a5760405162461bcd60e51b815260040161016290610e6e565b6104168683878b610732565b5050600192830192016103a4565b505050505050565b805161044a5760405162461bcd60e51b815260040161016290610e51565b60006104546102f8565b90506001600160a01b03831661047c5760405162461bcd60e51b815260040161016290610e8b565b6001600160a01b03831660009081526001820160205260409020546001600160601b0381166104af576104af82856106ea565b825160005b818110156104245760008582815181106104ca57fe5b6020908102919091018101516001600160e01b031981166000908152918790526040909120549091506001600160a01b039081169088168114156105205760405162461bcd60e51b815260040161016290610e17565b61052b8682846107d2565b6105378683878b610732565b5050600192830192016104b4565b80516105635760405162461bcd60e51b815260040161016290610f39565b600061056d6102f8565b90506001600160a01b038316156105965760405162461bcd60e51b815260040161016290610eff565b815160005b818110156100975760008482815181106105b157fe5b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b03166105ee8582846107d2565b505060010161059b565b6001600160a01b03821661062a578051156106255760405162461bcd60e51b815260040161016290610da3565b6106e6565b80516106485760405162461bcd60e51b815260040161016290610dfa565b600080836001600160a01b0316836040516106639190610c8d565b600060405180830381855af49150503d806000811461069e576040519150601f19603f3d011682016040523d82523d6000602084013e6106a3565b606091505b5091509150816102f2578051156106ce578060405162461bcd60e51b81526004016101629190610d90565b60405162461bcd60e51b815260040161016290610dc0565b5050565b6002820180546001600160a01b0390921660008181526001948501602090815260408220860185905594840183559182529290200180546001600160a01b0319169091179055565b6001600160e01b0319831660008181526020868152604080832080546001600160601b03909716600160a01b026001600160a01b0397881617815594909516808352600180890183529583208054968701815583528183206008870401805460e09890981c60046007909816979097026101000a96870263ffffffff9097021990971695909517909555529290915281546001600160a01b031916179055565b6001600160a01b0382166107f85760405162461bcd60e51b815260040161016290610ea8565b6001600160a01b0382163014156108215760405162461bcd60e51b815260040161016290610e34565b6001600160e01b03198116600090815260208481526040808320546001600160a01b03861684526001870190925290912054600160a01b9091046001600160601b0316906000190180821461094d576001600160a01b0384166000908152600186016020526040812080548390811061089657fe5b600091825260208083206008830401546001600160a01b038916845260018a019091526040909220805460079092166004026101000a90920460e01b9250829190859081106108e157fe5b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528690526040902080546001600160a01b0316600160a01b6001600160601b038516021790555b6001600160a01b0384166000908152600186016020526040902080548061097057fe5b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319851682528690526040812055806100975760028501546001600160a01b038516600090815260018781016020526040909120015460001990910190808214610a675760008760020183815481106109fd57fe5b6000918252602090912001546002890180546001600160a01b039092169250829184908110610a2857fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055929091168152600189810190925260409020018190555b86600201805480610a7457fe5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0388168252600189810190915260408220015550505050505050565b600082601f830112610acd578081fd5b81356020610ae2610add83610f7a565b610f56565b8281528181019085830183850287018401881015610afe578586fd5b855b85811015610b315781356001600160e01b031981168114610b1f578788fd5b84529284019290840190600101610b00565b5090979650505050505050565b60008083601f840112610b4f578182fd5b50813567ffffffffffffffff811115610b66578182fd5b602083019150836020828501011115610b7e57600080fd5b9250929050565b600060208284031215610b96578081fd5b8151610ba181611088565b9392505050565b600080600080600060608688031215610bbf578081fd5b853567ffffffffffffffff80821115610bd6578283fd5b818801915088601f830112610be9578283fd5b813581811115610bf7578384fd5b8960208083028501011115610c0a578384fd5b6020928301975095509087013590610c2182611088565b90935060408701359080821115610c36578283fd5b50610c4388828901610b3e565b969995985093965092949392505050565b6001600160a01b03169052565b60008151808452610c7981602086016020860161105c565b601f01601f19169290920160200192915050565b60008251610c9f81846020870161105c565b9190910192915050565b606080825284518282018190526000919060809081850190602080820287018401818b01875b84811015610d6157898303607f19018652815180516001600160a01b03168452848101518985019060038110610d0157fe5b858701526040918201519185018a9052815190819052908501908a90898601905b80831015610d4c5783516001600160e01b0319168252928701926001929092019190870190610d22565b50978601979450505090830190600101610ccf565b5050610d6f8289018b610c54565b8781036040890152610d81818a610c61565b9b9a5050505050505050505050565b600060208252610ba16020830184610c61565b60208082526003908201526205349360ec1b604082015260600190565b60208082526003908201526229a4a960e91b604082015260600190565b60208082526003908201526205341360ec1b604082015260600190565b60208082526003908201526253494360e81b604082015260600190565b60208082526003908201526229a92960e91b604082015260600190565b60208082526003908201526253524960e81b604082015260600190565b60208082526003908201526229a92360e91b604082015260600190565b60208082526003908201526253464560e81b604082015260600190565b60208082526003908201526205352360ec1b604082015260600190565b60208082526003908201526253524560e81b604082015260600190565b60208082526003908201526229a4a360e91b604082015260600190565b60208082526003908201526229a6a360e91b604082015260600190565b60208082526003908201526205345360ec1b604082015260600190565b602080825260039082015262534e5360e81b604082015260600190565b60208082526003908201526253455360e81b604082015260600190565b60405181810167ffffffffffffffff81118282101715610f7257fe5b604052919050565b600067ffffffffffffffff821115610f8e57fe5b5060209081020190565b6000610fa6610add84610f7a565b8381526020808201919084845b8781101561105057813587016060808236031215610fcf578788fd5b604080519182019167ffffffffffffffff8084118285101715610fee57fe5b928252833592610ffd84611088565b928152838701359260038410611011578a8bfd5b838883015282850135935080841115611028578a8bfd5b5061103536848601610abd565b91810191909152875250509382019390820190600101610fb3565b50919695505050505050565b60005b8381101561107757818101518382015260200161105f565b838111156102f25750506000910152565b6001600160a01b038116811461016b57600080fdfea2646970667358221220f2cee50758124b16660f6285761998647a026d862fc13b4ea6f80656828e52ca64736f6c63430007060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "params": {
          "_calldata": "A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init",
          "_diamondCut": "Contains the facet addresses and function selectors",
          "_init": "The address of the contract or facet to execute _calldata"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "Add/replace/remove any number of functions and optionally execute         a function with delegatecall"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}