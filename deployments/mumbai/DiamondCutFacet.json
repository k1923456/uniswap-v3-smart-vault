{
  "address": "0xAdf2c9e6cE2147e31582298eB29BB69c6D5F23FB",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3ff14849a83ce004e17821a611c8f65feb74621b3cae784506379c10beabf287",
  "receipt": {
    "to": null,
    "from": "0xDedAd387474099d24F9489bCDD05C21F8A3245FC",
    "contractAddress": "0xAdf2c9e6cE2147e31582298eB29BB69c6D5F23FB",
    "transactionIndex": 8,
    "gasUsed": "985128",
    "logsBloom": "0x
    "blockHash": "0x58f9a15f09fd528b5cd487066c4e21d7464701b031b7d7aa141a95467f89d557",
    "transactionHash": "0x3ff14849a83ce004e17821a611c8f65feb74621b3cae784506379c10beabf287",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 40466330,
        "transactionHash": "0x3ff14849a83ce004e17821a611c8f65feb74621b3cae784506379c10beabf287",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000dedad387474099d24f9489bcdd05c21f8a3245fc",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000551df55e5dd8000000000000000000000000000000000000000000000000004593e02510b2ed6000000000000000000000000000000000000000000000206a6ba121713b99cd60000000000000000000000000000000000000000000000000453ec22fb255156000000000000000000000000000000000000000000000206a6bf63f6699f7a56",
        "logIndex": 40,
        "blockHash": "0x58f9a15f09fd528b5cd487066c4e21d7464701b031b7d7aa141a95467f89d557"
      }
    ],
    "blockNumber": 40466330,
    "cumulativeGasUsed": "1957705",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "55336bc26235c2a8ef1da4e9acf1a7fc",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"_calldata\":\"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init\",\"_diamondCut\":\"Contains the facet addresses and function selectors\",\"_init\":\"The address of the contract or facet to execute _calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Add/replace/remove any number of functions and optionally execute         a function with delegatecall\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DiamondCutFacet.sol\":\"DiamondCutFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\n/******************************************************************************\\\\\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport { IDiamondCut } from \\\"./interfaces/IDiamondCut.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n\\ncontract DiamondCutFacet is IDiamondCut {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external override {\\n        PositionManagerStorage.enforceIsGovernance();\\n        PositionManagerStorage.diamondCut(_diamondCut, _init, _calldata);\\n    }\\n}\\n\",\"keccak256\":\"0xe805055b4fea07a783d3f1161689582282322971b52d892959473bb5ddac371c\",\"license\":\"GPL-2.0\"},\"contracts/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./interfaces/IPositionManager.sol\\\";\\nimport \\\"./interfaces/IUniswapAddressHolder.sol\\\";\\nimport \\\"./interfaces/IRegistryAddressHolder.sol\\\";\\nimport \\\"./interfaces/IDiamondCut.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\n\\nstruct FacetAddressAndPosition {\\n    address facetAddress;\\n    uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n}\\n\\nstruct FacetFunctionSelectors {\\n    bytes4[] functionSelectors;\\n    uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n}\\n\\nstruct StorageStruct {\\n    // maps function selector to the facet address and\\n    // the position of the selector in the facetFunctionSelectors.selectors array\\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n    // maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n    // facet addresses\\n    address[] facetAddresses;\\n    address owner;\\n    IRegistryAddressHolder registryAddressHolder;\\n    IUniswapAddressHolder uniswapAddressHolder;\\n    mapping(bytes32 => bytes32) storageVars;\\n}\\n\\nlibrary PositionManagerStorage {\\n    bytes32 private constant key = keccak256(\\\"position-manager-storage-location\\\");\\n\\n    ///@notice get the storage from memory location\\n    ///@return s the storage struct\\n    function getStorage() internal pure returns (StorageStruct storage s) {\\n        bytes32 k = key;\\n        assembly {\\n            s.slot := k\\n        }\\n    }\\n\\n    ///@notice emitted when a contract changes ownership\\n    ///@param previousOwner previous owner of the contract\\n    ///@param newOwner new owner of the contract\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    ///@notice set the owner field on the storage struct\\n    ///@param _newOwner new owner of the storage struct\\n    function setContractOwner(address _newOwner) internal {\\n        require(_newOwner != address(0), \\\"SNO\\\");\\n        StorageStruct storage ds = getStorage();\\n        address previousOwner = ds.owner;\\n        ds.owner = _newOwner;\\n        if (_newOwner != previousOwner) {\\n            emit OwnershipTransferred(previousOwner, _newOwner);\\n        }\\n    }\\n\\n    ///@notice make sure that a function is called by the PositionManagerFactory contract\\n    function enforceIsGovernance() internal view {\\n        require(\\n            msg.sender == IRegistry(getStorage().registryAddressHolder.registry()).positionManagerFactoryAddress(),\\n            \\\"SMF\\\"\\n        );\\n    }\\n\\n    ///@notice emitted when a facet is cut into the diamond\\n    ///@param _diamondCut facet cut\\n    ///@param _init diamond cut init address\\n    ///@param _calldata facet cut calldata\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    ///@notice Internal function version of diamondCut\\n    ///@param _diamondCut facet cut\\n    ///@param _init diamond cut init address\\n    ///@param _calldata facet cut calldata\\n    function diamondCut(IDiamondCut.FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n        uint256 _diamondCutLength = _diamondCut.length;\\n        for (uint256 facetIndex; facetIndex < _diamondCutLength; ++facetIndex) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"SIF\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    ///@notice Add functions to facet\\n    ///@param _facetAddress address of the facet\\n    ///@param _functionSelectors function selectors to add\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length != 0, \\\"SNS\\\");\\n        StorageStruct storage ds = getStorage();\\n        require(_facetAddress != address(0), \\\"SA0\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n\\n        uint256 _functionSelectorsLength = _functionSelectors.length;\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectorsLength; ++selectorIndex) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"SFE\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    ///@notice Add facet by address\\n    ///@param ds storage struct\\n    ///@param _facetAddress address of the facet\\n    function addFacet(StorageStruct storage ds, address _facetAddress) internal {\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n    ///@notice Add single function to facet\\n    ///@param ds storage struct\\n    ///@param _selector function selector to add\\n    ///@param _selectorPosition position of the function selector in the facetFunctionSelectors array\\n    function addFunction(\\n        StorageStruct storage ds,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    ///@notice Remove single function from facet\\n    ///@param ds storage struct\\n    ///@param _facetAddress address of the facet\\n    ///@param _selector function selector to remove\\n    function removeFunction(StorageStruct storage ds, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"SRE\\\");\\n        require(_facetAddress != address(this), \\\"SRI\\\");\\n\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    ///@notice Replace functions in facet\\n    ///@param _facetAddress address of the facet\\n    ///@param _functionSelectors function selectors to replace\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length != 0, \\\"SRF\\\");\\n        StorageStruct storage ds = getStorage();\\n        require(_facetAddress != address(0), \\\"SR0\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n\\n        uint256 _functionSelectorsLength = _functionSelectors.length;\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectorsLength; ++selectorIndex) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n\\n            require(oldFacetAddress != _facetAddress, \\\"SRR\\\");\\n\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    ///@notice remove functions in facet\\n    ///@param _functionSelectors function selectors to remove\\n    function removeFunctions(bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length != 0, \\\"SES\\\");\\n\\n        StorageStruct storage ds = getStorage();\\n\\n        uint256 _functionSelectorsLength = _functionSelectors.length;\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectorsLength; ++selectorIndex) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    ///@notice Initialize the diamond cut\\n    ///@param _init delegatecall address\\n    ///@param _calldata delegatecall data\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"SI0\\\");\\n        } else {\\n            require(_calldata.length != 0, \\\"SIC\\\");\\n\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n\\n            if (!success) {\\n                if (error.length != 0) {\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"SIR\\\");\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb58fc01a6c4ab14865c6b16c5d3f731d880e00c2e58ec2c2a680bd608c8842a5\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x51d83386aa10023cb9585d489b9bf7489aa7e43e6996fa67d01a856b8be25fdd\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IPositionManager {\\n    enum PositionStatus {\\n        Initial,\\n        Running,\\n        Closed\\n    }\\n    // Initial=0, Running=1, Closed=2\\n    struct PositionInfo {\\n        uint256 tokenId;\\n        address strategyProvider;\\n        bytes16 strategyId;\\n        uint256 amount0Deposited;\\n        uint256 amount1Deposited;\\n        uint256 amount0DepositedUsdValue;\\n        uint256 amount1DepositedUsdValue;\\n        uint256 amount0CollectedFee;\\n        uint256 amount1CollectedFee;\\n        uint256 amount0Leftover;\\n        uint256 amount1Leftover;\\n        int24 tickLowerDiff;\\n        int24 tickUpperDiff;\\n    }\\n\\n    struct PositionSettlement {\\n        uint256 amount0Returned;\\n        uint256 amount1Returned;\\n        uint256 amount0ReturnedUsdValue;\\n        uint256 amount1ReturnedUsdValue;\\n    }\\n\\n    ///@notice get position id counter\\n    ///@return uint256 position id counter\\n    function positionIdCounter() external view returns (uint256);\\n\\n    ///@notice get position status\\n    ///@param positionId ID of the position\\n    ///@return PositionStatus position status\\n    function positionStatus(uint256 positionId) external view returns (PositionStatus);\\n\\n    ///@notice get position settlement\\n    ///@param positionId ID of the position\\n    ///@return positionSettlementInfo PositionSettlement struct\\n    function getPositionSettlement(\\n        uint256 positionId\\n    ) external view returns (PositionSettlement memory positionSettlementInfo);\\n\\n    ///@notice create position\\n    ///@param tokenId ID of the position\\n    ///@param strategyProvider The address of the strategy provider\\n    ///@param strategyId The ID of the strategy\\n    ///@param amount0Deposited The amount of token0 deposited\\n    ///@param amount1Deposited The amount of token1 deposited\\n    ///@param amount0DepositedUsdValue The amount of token0 deposited in USD\\n    ///@param amount1DepositedUsdValue The amount of token1 deposited in USD\\n    ///@param tickLowerDiff difference between the current tick of the position and the provied lower tick\\n    ///@param tickUpperDiff difference between the current tick of the position and the provied upper tick\\n    ///@param amount0Leftover The amount of token0 leftover after rebalance\\n    ///@param amount1Leftover The amount of token1 leftover after rebalance\\n    struct CreatePositionInput {\\n        uint256 tokenId;\\n        address strategyProvider;\\n        bytes16 strategyId;\\n        uint256 amount0Deposited;\\n        uint256 amount1Deposited;\\n        uint256 amount0DepositedUsdValue;\\n        uint256 amount1DepositedUsdValue;\\n        int24 tickLowerDiff;\\n        int24 tickUpperDiff;\\n        uint256 amount0Leftover;\\n        uint256 amount1Leftover;\\n    }\\n\\n    ///@notice create position\\n    ///@param inputs CreatePositionInput struct\\n    ///@return positionId ID of the position\\n    function createPosition(CreatePositionInput calldata inputs) external returns (uint256 positionId);\\n\\n    ///@notice update position total deposit USD value\\n    ///@param positionId ID of the position\\n    ///@param amount0Deposited The amount of token0 deposited\\n    ///@param amount1Deposited The amount of token1 deposited\\n    ///@param amount0DepositedUsdValue The amount of token0 deposited in USD\\n    ///@param amount1DepositedUsdValue The amount of token1 deposited in USD\\n    ///@param amount0Leftover The amount of token0 leftover after increasing liquidity\\n    ///@param amount1Leftover The amount of token1 leftover after increasing liquidity\\n    function middlewareIncreaseLiquidity(\\n        uint256 positionId,\\n        uint256 amount0Deposited,\\n        uint256 amount1Deposited,\\n        uint256 amount0DepositedUsdValue,\\n        uint256 amount1DepositedUsdValue,\\n        uint256 amount0Leftover,\\n        uint256 amount1Leftover\\n    ) external;\\n\\n    ///@notice get positionId from tokenId\\n    ///@param tokenId ID of the position\\n    ///@return positionId ID of the position\\n    function getPositionIdFromTokenId(uint256 tokenId) external view returns (uint256);\\n\\n    ///@notice get position info from positionId\\n    ///@param positionId ID of the position\\n    ///@return positionInfo PositionInfo struct\\n    function getPositionInfo(uint256 positionId) external view returns (PositionInfo memory positionInfo);\\n\\n    ///@notice check if the position is running\\n    ///@param positionId ID of the position\\n    ///@return bool true if the position is running\\n    function isPositionRunning(uint256 positionId) external view returns (bool);\\n\\n    ///@notice middleware function to update position info for rebalance\\n    ///@param positionId ID of the position\\n    ///@param newTokenId ID of the new NFT\\n    ///@param tickLowerDiff The difference between the current tick and the tickLower\\n    ///@param tickUpperDiff The difference between the current tick and the tickUpper\\n    ///@param amount0CollectedFee The amount of token0 collected fee after rebalance\\n    ///@param amount1CollectedFee The amount of token1 collected fee after rebalance\\n    ///@param amount0Leftover The amount of token0 leftover after rebalance\\n    ///@param amount1Leftover The amount of token1 leftover after rebalance\\n    function middlewareRebalance(\\n        uint256 positionId,\\n        uint256 newTokenId,\\n        int24 tickLowerDiff,\\n        int24 tickUpperDiff,\\n        uint256 amount0CollectedFee,\\n        uint256 amount1CollectedFee,\\n        uint256 amount0Leftover,\\n        uint256 amount1Leftover\\n    ) external;\\n\\n    ///@notice struct for middleware withdraw\\n    ///@param positionId ID of the position\\n    ///@param amount0CollectedFee The amount of token0 collected fee after withdrwan\\n    ///@param amount1CollectedFee The amount of token1 collected fee after withdrwan\\n    ///@param amount0Returned The amount of token0 returned after withdrwan\\n    ///@param amount1Returned The amount of token1 returned after withdrwan\\n    ///@param amount0ReturnedUsdValue The amount of token0 returned in USD after withdrwan\\n    ///@param amount1ReturnedUsdValue The amount of token1 returned in USD after withdrwan\\n    struct MiddlewareWithdrawInput {\\n        uint256 positionId;\\n        uint256 amount0CollectedFee;\\n        uint256 amount1CollectedFee;\\n        uint256 amount0Returned;\\n        uint256 amount1Returned;\\n        uint256 amount0ReturnedUsdValue;\\n        uint256 amount1ReturnedUsdValue;\\n    }\\n\\n    ///@notice middleware function to update position info for withdraw\\n    ///@param input MiddlewareWithdrawInput struct\\n    function middlewareWithdraw(MiddlewareWithdrawInput memory input) external;\\n\\n    function setModuleData(uint256 positionId, address moduleAddress, bytes32 data) external;\\n\\n    function getPositionModuleData(uint256 _positionId, address _moduleAddress) external view returns (bytes32 data);\\n\\n    function getOwner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa27995b72b57d2a759ddce385dfac9d0efbe0db113c633a78bd5b2ade9b3d927\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IRegistry {\\n    ///@notice emitted when governance address is changed\\n    ///@param oldGovernance the old governance address\\n    ///@param newGovernance the new governance address\\n    event GovernanceChanged(address oldGovernance, address newGovernance);\\n\\n    ///@notice emitted when service fee recipient address is changed\\n    ///@param oldServiceFeeRecipient the old service fee recipient address\\n    ///@param newServiceFeeRecipient the new service fee recipient address\\n    event ServiceFeeRecipientChanged(address oldServiceFeeRecipient, address newServiceFeeRecipient);\\n\\n    ///@notice emitted when position manager factory address is changed\\n    ///@param oldPositionManagerFactory the old position manager factory address\\n    ///@param newPositionManagerFactory the new position manager factory address\\n    event PositionManagerFactoryChanged(address oldPositionManagerFactory, address newPositionManagerFactory);\\n\\n    ///@notice emitted when strategy provider wallet factory address is changed\\n    ///@param oldStrategyProviderWalletFactory the old strategy provider wallet factory address\\n    ///@param newStrategyProviderWalletFactory the new strategy provider wallet factory address\\n    event StrategyProviderWalletFactoryChanged(\\n        address oldStrategyProviderWalletFactory,\\n        address newStrategyProviderWalletFactory\\n    );\\n\\n    ///@notice emitted when official account address is changed\\n    ///@param newOfficialAccount the new official account address\\n    event OfficialAccountChanged(address oldOfficialAccount, address newOfficialAccount);\\n\\n    ///@notice emitted when a contract is added to registry\\n    ///@param newContract address of the new contract\\n    ///@param contractId keccak of contract name\\n    event ContractAdded(address newContract, bytes32 contractId);\\n\\n    ///@notice emitted when a contract address is updated\\n    ///@param oldContract address of the contract before update\\n    ///@param newContract address of the contract after update\\n    ///@param contractId keccak of contract name\\n    event ContractChanged(address oldContract, address newContract, bytes32 contractId);\\n\\n    ///@notice emitted when a contract address is removed\\n    ///@param contractAddress address of the removed contract\\n    ///@param contractId keccak of removed contract name\\n    event ContractRemoved(address contractAddress, bytes32 contractId);\\n\\n    ///@notice emitted when a keeper is added to whitelist\\n    ///@param keeper address of the added keeper\\n    event KeeperAdded(address keeper);\\n\\n    ///@notice emitted when a keeper is removed from whitelist\\n    ///@param keeper address of the removed keeper\\n    event KeeperRemoved(address keeper);\\n\\n    ///@notice emitted when a fee tier is activated\\n    ///@param feeTier fee tier activated\\n    event FeeTierActivated(uint24 feeTier);\\n\\n    ///@notice emitted when a fee tier is deactivated\\n    ///@param feeTier fee tier deactivated\\n    event FeeTierDeactivated(uint24 feeTier);\\n\\n    ///@notice emitted when service fee ratio is updated\\n    ///@param licenseAmount license amount to update service fee ratio\\n    ///@param serviceFeeRatio service fee ratio to update\\n    event ServiceFeeRatioUpdated(uint32 licenseAmount, uint32 serviceFeeRatio);\\n\\n    ///@notice emitted when usd value token address is updated\\n    ///@param oldUsdValueTokenAddress the old usd value token address\\n    ///@param newUsdValueTokenAddress the new usd value token address\\n    event UsdValueTokenAddressUpdated(address oldUsdValueTokenAddress, address newUsdValueTokenAddress);\\n\\n    ///@notice emitted when weth9 address is updated\\n    ///@param oldWeth9 the old weth9 address\\n    ///@param newWeth9 the new weth9 address\\n    event Weth9Updated(address oldWeth9, address newWeth9);\\n\\n    ///@notice emitted when max twap deviation is updated\\n    ///@param oldMaxTwapDeviation the old twap deviation\\n    ///@param newMaxTwapDeviation the new twap deviation\\n    event MaxTwapDeviationUpdated(int24 oldMaxTwapDeviation, int24 newMaxTwapDeviation);\\n\\n    ///@notice emitted when twap duration is updated\\n    ///@param oldTwapDuration the old twap duration\\n    ///@param newTwapDuration the new twap duration\\n    event TwapDurationUpdated(uint32 oldTwapDuration, uint32 newTwapDuration);\\n\\n    ///@notice emitted when module data is updated\\n    ///@param id keccak256 of module id string\\n    ///@param contractAddress address of the module\\n    ///@param defaultData default data of the module\\n    event ModuleDataUpdated(bytes32 id, address contractAddress, bytes32 defaultData);\\n\\n    struct Entry {\\n        bytes32 id;\\n        address contractAddress;\\n        bytes32 defaultData;\\n    }\\n\\n    ///@notice check if the fee tier is allowable\\n    ///@param feeTier the fee tier to check\\n    ///@return true if the fee tier is allowable, false otherwise\\n    function isAllowableFeeTier(uint24 feeTier) external view returns (bool);\\n\\n    ///@notice get the list of fee tiers\\n    ///@return array of fee tiers\\n    function getFeeTiers() external view returns (uint24[] memory);\\n\\n    ///@notice get the list of allowable fee tiers\\n    ///@return array of allowable fee tiers\\n    function getAllowableFeeTiers() external view returns (uint24[] memory);\\n\\n    ///@notice return the address of PositionManagerFactory\\n    ///@return address of PositionManagerFactory\\n    function positionManagerFactoryAddress() external view returns (address);\\n\\n    ///@notice return the address of StrategyProviderWalletFactory\\n    ///@return address of StrategyProviderWalletFactory\\n    function strategyProviderWalletFactoryAddress() external view returns (address);\\n\\n    ///@notice return the address of officialAccount\\n    ///@return address of officialAccount\\n    function officialAccount() external view returns (address);\\n\\n    ///@notice return the address of weth9\\n    ///@return address of weth9\\n    function weth9() external view returns (address);\\n\\n    ///@notice return the address of Governance\\n    ///@return address of Governance\\n    function governance() external view returns (address);\\n\\n    ///@notice return the address of recipient of service fee\\n    ///@return address of recipient of service fee\\n    function serviceFeeRecipient() external view returns (address);\\n\\n    ///@notice return the max twap deviation\\n    ///@return int24 max twap deviation\\n    function maxTwapDeviation() external view returns (int24);\\n\\n    ///@notice return the twap duration\\n    ///@return uint32 twap duration\\n    function twapDuration() external view returns (uint32);\\n\\n    ///@notice return the address of USD value token\\n    ///@return address of USD value token\\n    function usdValueTokenAddress() external view returns (address);\\n\\n    ///@notice return the denominator of service fee ratio\\n    ///@return uint32 denominator of service fee ratio\\n    function serviceFeeDenominator() external view returns (uint32);\\n\\n    ///@notice return the address of Governance\\n    ///@return address of Governance\\n    function getModuleKeys() external view returns (bytes32[] memory);\\n\\n    ///@notice checks if the address is whitelisted as a keeper\\n    ///@param _keeper address to check\\n    ///@return bool true if the address is withelisted, false otherwise\\n    function whitelistedKeepers(address _keeper) external view returns (bool);\\n\\n    ///@notice get the module info by id\\n    ///@param _id id of the module\\n    ///@return Entry module info\\n    function getModuleInfo(bytes32 _id) external view returns (Entry memory);\\n\\n    ///@notice check if the module is active\\n    ///@param _contractAddress address of the module\\n    ///@return bool true if the module is active, false otherwise\\n    function activeModule(address _contractAddress) external view returns (bool);\\n\\n    ///@notice get service fee ratio for a given license amount\\n    ///@param _licenseAmount license amount to get service fee ratio\\n    function getServiceFeeRatioFromLicenseAmount(uint32 _licenseAmount) external view returns (uint32 ratio);\\n}\\n\",\"keccak256\":\"0xcfdebc23759b625576394a17289e6690cd5e5d6da8699da8c6d36bcbc25b46ef\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IRegistryAddressHolder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IRegistryAddressHolder {\\n    ///@notice default getter for regitsry address\\n    ///@return address The address of the registry\\n    function registry() external view returns (address);\\n\\n    ///@notice Set the address of registry\\n    ///@param newAddress new address of registry\\n    function setRegistryAddress(address newAddress) external;\\n}\\n\",\"keccak256\":\"0x5eb7fcc946db90f955527b80acaf1dbb7ce4734c215ae6c38220ccf371b70d9d\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IUniswapAddressHolder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IUniswapAddressHolder {\\n    ///@notice default getter for nonfungiblePositionManagerAddress\\n    ///@return address The address of the non fungible position manager\\n    function nonfungiblePositionManagerAddress() external view returns (address);\\n\\n    ///@notice default getter for uniswapV3FactoryAddress\\n    ///@return address The address of the Uniswap V3 factory\\n    function uniswapV3FactoryAddress() external view returns (address);\\n\\n    ///@notice default getter for swapRouterAddress\\n    ///@return address The address of the swap router\\n    function swapRouterAddress() external view returns (address);\\n\\n    ///@notice Set the address of nonfungible position manager\\n    ///@param newAddress new address of nonfungible position manager\\n    function setNonFungibleAddress(address newAddress) external;\\n\\n    ///@notice Set the address of the Uniswap V3 factory\\n    ///@param newAddress new address of the Uniswap V3 factory\\n    function setFactoryAddress(address newAddress) external;\\n\\n    ///@notice Set the address of uniV3 swap router\\n    ///@param newAddress new address of univ3 swap router\\n    function setSwapRouterAddress(address newAddress) external;\\n}\\n\",\"keccak256\":\"0x781c4d8062cd513f4f8d308b0473a3a61975d9d907b8ded998797cfc0ad13e9d\",\"license\":\"GPL-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "params": {
          "_calldata": "A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init",
          "_diamondCut": "Contains the facet addresses and function selectors",
          "_init": "The address of the contract or facet to execute _calldata"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "Add/replace/remove any number of functions and optionally execute         a function with delegatecall"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}